// Code generated by protoc-gen-gogo.
// source: github.com/TheThingsNetwork/api/api.proto
// DO NOT EDIT!

/*
	Package api is a generated protocol buffer package.

	It is generated from these files:
		github.com/TheThingsNetwork/api/api.proto

	It has these top-level messages:
		Percentiles
		Rates
		SystemStats
		ComponentStats
*/
package api

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Percentiles struct {
	Percentile1  float32 `protobuf:"fixed32,1,opt,name=percentile1,proto3" json:"percentile1,omitempty"`
	Percentile5  float32 `protobuf:"fixed32,2,opt,name=percentile5,proto3" json:"percentile5,omitempty"`
	Percentile10 float32 `protobuf:"fixed32,3,opt,name=percentile10,proto3" json:"percentile10,omitempty"`
	Percentile25 float32 `protobuf:"fixed32,4,opt,name=percentile25,proto3" json:"percentile25,omitempty"`
	Percentile50 float32 `protobuf:"fixed32,5,opt,name=percentile50,proto3" json:"percentile50,omitempty"`
	Percentile75 float32 `protobuf:"fixed32,6,opt,name=percentile75,proto3" json:"percentile75,omitempty"`
	Percentile90 float32 `protobuf:"fixed32,7,opt,name=percentile90,proto3" json:"percentile90,omitempty"`
	Percentile95 float32 `protobuf:"fixed32,8,opt,name=percentile95,proto3" json:"percentile95,omitempty"`
	Percentile99 float32 `protobuf:"fixed32,9,opt,name=percentile99,proto3" json:"percentile99,omitempty"`
}

func (m *Percentiles) Reset()                    { *m = Percentiles{} }
func (*Percentiles) ProtoMessage()               {}
func (*Percentiles) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{0} }

func (m *Percentiles) GetPercentile1() float32 {
	if m != nil {
		return m.Percentile1
	}
	return 0
}

func (m *Percentiles) GetPercentile5() float32 {
	if m != nil {
		return m.Percentile5
	}
	return 0
}

func (m *Percentiles) GetPercentile10() float32 {
	if m != nil {
		return m.Percentile10
	}
	return 0
}

func (m *Percentiles) GetPercentile25() float32 {
	if m != nil {
		return m.Percentile25
	}
	return 0
}

func (m *Percentiles) GetPercentile50() float32 {
	if m != nil {
		return m.Percentile50
	}
	return 0
}

func (m *Percentiles) GetPercentile75() float32 {
	if m != nil {
		return m.Percentile75
	}
	return 0
}

func (m *Percentiles) GetPercentile90() float32 {
	if m != nil {
		return m.Percentile90
	}
	return 0
}

func (m *Percentiles) GetPercentile95() float32 {
	if m != nil {
		return m.Percentile95
	}
	return 0
}

func (m *Percentiles) GetPercentile99() float32 {
	if m != nil {
		return m.Percentile99
	}
	return 0
}

type Rates struct {
	Rate1  float32 `protobuf:"fixed32,1,opt,name=rate1,proto3" json:"rate1,omitempty"`
	Rate5  float32 `protobuf:"fixed32,2,opt,name=rate5,proto3" json:"rate5,omitempty"`
	Rate15 float32 `protobuf:"fixed32,3,opt,name=rate15,proto3" json:"rate15,omitempty"`
}

func (m *Rates) Reset()                    { *m = Rates{} }
func (*Rates) ProtoMessage()               {}
func (*Rates) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{1} }

func (m *Rates) GetRate1() float32 {
	if m != nil {
		return m.Rate1
	}
	return 0
}

func (m *Rates) GetRate5() float32 {
	if m != nil {
		return m.Rate5
	}
	return 0
}

func (m *Rates) GetRate15() float32 {
	if m != nil {
		return m.Rate15
	}
	return 0
}

type SystemStats struct {
	Load   *SystemStats_Loadstats   `protobuf:"bytes,1,opt,name=load" json:"load,omitempty"`
	Cpu    *SystemStats_CPUStats    `protobuf:"bytes,2,opt,name=cpu" json:"cpu,omitempty"`
	Memory *SystemStats_MemoryStats `protobuf:"bytes,3,opt,name=memory" json:"memory,omitempty"`
}

func (m *SystemStats) Reset()                    { *m = SystemStats{} }
func (*SystemStats) ProtoMessage()               {}
func (*SystemStats) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{2} }

func (m *SystemStats) GetLoad() *SystemStats_Loadstats {
	if m != nil {
		return m.Load
	}
	return nil
}

func (m *SystemStats) GetCpu() *SystemStats_CPUStats {
	if m != nil {
		return m.Cpu
	}
	return nil
}

func (m *SystemStats) GetMemory() *SystemStats_MemoryStats {
	if m != nil {
		return m.Memory
	}
	return nil
}

type SystemStats_Loadstats struct {
	Load1  float32 `protobuf:"fixed32,1,opt,name=load1,proto3" json:"load1,omitempty"`
	Load5  float32 `protobuf:"fixed32,2,opt,name=load5,proto3" json:"load5,omitempty"`
	Load15 float32 `protobuf:"fixed32,3,opt,name=load15,proto3" json:"load15,omitempty"`
}

func (m *SystemStats_Loadstats) Reset()                    { *m = SystemStats_Loadstats{} }
func (*SystemStats_Loadstats) ProtoMessage()               {}
func (*SystemStats_Loadstats) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{2, 0} }

func (m *SystemStats_Loadstats) GetLoad1() float32 {
	if m != nil {
		return m.Load1
	}
	return 0
}

func (m *SystemStats_Loadstats) GetLoad5() float32 {
	if m != nil {
		return m.Load5
	}
	return 0
}

func (m *SystemStats_Loadstats) GetLoad15() float32 {
	if m != nil {
		return m.Load15
	}
	return 0
}

type SystemStats_CPUStats struct {
	User       float32 `protobuf:"fixed32,1,opt,name=user,proto3" json:"user,omitempty"`
	System     float32 `protobuf:"fixed32,2,opt,name=system,proto3" json:"system,omitempty"`
	Idle       float32 `protobuf:"fixed32,3,opt,name=idle,proto3" json:"idle,omitempty"`
	Percentage float32 `protobuf:"fixed32,4,opt,name=percentage,proto3" json:"percentage,omitempty"`
}

func (m *SystemStats_CPUStats) Reset()                    { *m = SystemStats_CPUStats{} }
func (*SystemStats_CPUStats) ProtoMessage()               {}
func (*SystemStats_CPUStats) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{2, 1} }

func (m *SystemStats_CPUStats) GetUser() float32 {
	if m != nil {
		return m.User
	}
	return 0
}

func (m *SystemStats_CPUStats) GetSystem() float32 {
	if m != nil {
		return m.System
	}
	return 0
}

func (m *SystemStats_CPUStats) GetIdle() float32 {
	if m != nil {
		return m.Idle
	}
	return 0
}

func (m *SystemStats_CPUStats) GetPercentage() float32 {
	if m != nil {
		return m.Percentage
	}
	return 0
}

type SystemStats_MemoryStats struct {
	Total     uint64 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Available uint64 `protobuf:"varint,2,opt,name=available,proto3" json:"available,omitempty"`
	Used      uint64 `protobuf:"varint,3,opt,name=used,proto3" json:"used,omitempty"`
}

func (m *SystemStats_MemoryStats) Reset()                    { *m = SystemStats_MemoryStats{} }
func (*SystemStats_MemoryStats) ProtoMessage()               {}
func (*SystemStats_MemoryStats) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{2, 2} }

func (m *SystemStats_MemoryStats) GetTotal() uint64 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *SystemStats_MemoryStats) GetAvailable() uint64 {
	if m != nil {
		return m.Available
	}
	return 0
}

func (m *SystemStats_MemoryStats) GetUsed() uint64 {
	if m != nil {
		return m.Used
	}
	return 0
}

type ComponentStats struct {
	Uptime        uint64                      `protobuf:"varint,1,opt,name=uptime,proto3" json:"uptime,omitempty"`
	Cpu           *ComponentStats_CPUStats    `protobuf:"bytes,2,opt,name=cpu" json:"cpu,omitempty"`
	Memory        *ComponentStats_MemoryStats `protobuf:"bytes,3,opt,name=memory" json:"memory,omitempty"`
	Goroutines    uint64                      `protobuf:"varint,4,opt,name=goroutines,proto3" json:"goroutines,omitempty"`
	GcCpuFraction float32                     `protobuf:"fixed32,5,opt,name=gc_cpu_fraction,json=gcCpuFraction,proto3" json:"gc_cpu_fraction,omitempty"`
}

func (m *ComponentStats) Reset()                    { *m = ComponentStats{} }
func (*ComponentStats) ProtoMessage()               {}
func (*ComponentStats) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{3} }

func (m *ComponentStats) GetUptime() uint64 {
	if m != nil {
		return m.Uptime
	}
	return 0
}

func (m *ComponentStats) GetCpu() *ComponentStats_CPUStats {
	if m != nil {
		return m.Cpu
	}
	return nil
}

func (m *ComponentStats) GetMemory() *ComponentStats_MemoryStats {
	if m != nil {
		return m.Memory
	}
	return nil
}

func (m *ComponentStats) GetGoroutines() uint64 {
	if m != nil {
		return m.Goroutines
	}
	return 0
}

func (m *ComponentStats) GetGcCpuFraction() float32 {
	if m != nil {
		return m.GcCpuFraction
	}
	return 0
}

type ComponentStats_CPUStats struct {
	User       float32 `protobuf:"fixed32,1,opt,name=user,proto3" json:"user,omitempty"`
	System     float32 `protobuf:"fixed32,2,opt,name=system,proto3" json:"system,omitempty"`
	Idle       float32 `protobuf:"fixed32,3,opt,name=idle,proto3" json:"idle,omitempty"`
	Percentage float32 `protobuf:"fixed32,4,opt,name=percentage,proto3" json:"percentage,omitempty"`
}

func (m *ComponentStats_CPUStats) Reset()                    { *m = ComponentStats_CPUStats{} }
func (*ComponentStats_CPUStats) ProtoMessage()               {}
func (*ComponentStats_CPUStats) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{3, 0} }

func (m *ComponentStats_CPUStats) GetUser() float32 {
	if m != nil {
		return m.User
	}
	return 0
}

func (m *ComponentStats_CPUStats) GetSystem() float32 {
	if m != nil {
		return m.System
	}
	return 0
}

func (m *ComponentStats_CPUStats) GetIdle() float32 {
	if m != nil {
		return m.Idle
	}
	return 0
}

func (m *ComponentStats_CPUStats) GetPercentage() float32 {
	if m != nil {
		return m.Percentage
	}
	return 0
}

type ComponentStats_MemoryStats struct {
	Memory uint64 `protobuf:"varint,1,opt,name=memory,proto3" json:"memory,omitempty"`
	Swap   uint64 `protobuf:"varint,2,opt,name=swap,proto3" json:"swap,omitempty"`
	Heap   uint64 `protobuf:"varint,10,opt,name=heap,proto3" json:"heap,omitempty"`
	Stack  uint64 `protobuf:"varint,11,opt,name=stack,proto3" json:"stack,omitempty"`
}

func (m *ComponentStats_MemoryStats) Reset()                    { *m = ComponentStats_MemoryStats{} }
func (*ComponentStats_MemoryStats) ProtoMessage()               {}
func (*ComponentStats_MemoryStats) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{3, 1} }

func (m *ComponentStats_MemoryStats) GetMemory() uint64 {
	if m != nil {
		return m.Memory
	}
	return 0
}

func (m *ComponentStats_MemoryStats) GetSwap() uint64 {
	if m != nil {
		return m.Swap
	}
	return 0
}

func (m *ComponentStats_MemoryStats) GetHeap() uint64 {
	if m != nil {
		return m.Heap
	}
	return 0
}

func (m *ComponentStats_MemoryStats) GetStack() uint64 {
	if m != nil {
		return m.Stack
	}
	return 0
}

func init() {
	proto.RegisterType((*Percentiles)(nil), "api.Percentiles")
	proto.RegisterType((*Rates)(nil), "api.Rates")
	proto.RegisterType((*SystemStats)(nil), "api.SystemStats")
	proto.RegisterType((*SystemStats_Loadstats)(nil), "api.SystemStats.Loadstats")
	proto.RegisterType((*SystemStats_CPUStats)(nil), "api.SystemStats.CPUStats")
	proto.RegisterType((*SystemStats_MemoryStats)(nil), "api.SystemStats.MemoryStats")
	proto.RegisterType((*ComponentStats)(nil), "api.ComponentStats")
	proto.RegisterType((*ComponentStats_CPUStats)(nil), "api.ComponentStats.CPUStats")
	proto.RegisterType((*ComponentStats_MemoryStats)(nil), "api.ComponentStats.MemoryStats")
}
func (this *Percentiles) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Percentiles)
	if !ok {
		that2, ok := that.(Percentiles)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Percentiles")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Percentiles but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Percentiles but is not nil && this == nil")
	}
	if this.Percentile1 != that1.Percentile1 {
		return fmt.Errorf("Percentile1 this(%v) Not Equal that(%v)", this.Percentile1, that1.Percentile1)
	}
	if this.Percentile5 != that1.Percentile5 {
		return fmt.Errorf("Percentile5 this(%v) Not Equal that(%v)", this.Percentile5, that1.Percentile5)
	}
	if this.Percentile10 != that1.Percentile10 {
		return fmt.Errorf("Percentile10 this(%v) Not Equal that(%v)", this.Percentile10, that1.Percentile10)
	}
	if this.Percentile25 != that1.Percentile25 {
		return fmt.Errorf("Percentile25 this(%v) Not Equal that(%v)", this.Percentile25, that1.Percentile25)
	}
	if this.Percentile50 != that1.Percentile50 {
		return fmt.Errorf("Percentile50 this(%v) Not Equal that(%v)", this.Percentile50, that1.Percentile50)
	}
	if this.Percentile75 != that1.Percentile75 {
		return fmt.Errorf("Percentile75 this(%v) Not Equal that(%v)", this.Percentile75, that1.Percentile75)
	}
	if this.Percentile90 != that1.Percentile90 {
		return fmt.Errorf("Percentile90 this(%v) Not Equal that(%v)", this.Percentile90, that1.Percentile90)
	}
	if this.Percentile95 != that1.Percentile95 {
		return fmt.Errorf("Percentile95 this(%v) Not Equal that(%v)", this.Percentile95, that1.Percentile95)
	}
	if this.Percentile99 != that1.Percentile99 {
		return fmt.Errorf("Percentile99 this(%v) Not Equal that(%v)", this.Percentile99, that1.Percentile99)
	}
	return nil
}
func (this *Percentiles) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Percentiles)
	if !ok {
		that2, ok := that.(Percentiles)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Percentile1 != that1.Percentile1 {
		return false
	}
	if this.Percentile5 != that1.Percentile5 {
		return false
	}
	if this.Percentile10 != that1.Percentile10 {
		return false
	}
	if this.Percentile25 != that1.Percentile25 {
		return false
	}
	if this.Percentile50 != that1.Percentile50 {
		return false
	}
	if this.Percentile75 != that1.Percentile75 {
		return false
	}
	if this.Percentile90 != that1.Percentile90 {
		return false
	}
	if this.Percentile95 != that1.Percentile95 {
		return false
	}
	if this.Percentile99 != that1.Percentile99 {
		return false
	}
	return true
}
func (this *Rates) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Rates)
	if !ok {
		that2, ok := that.(Rates)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Rates")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Rates but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Rates but is not nil && this == nil")
	}
	if this.Rate1 != that1.Rate1 {
		return fmt.Errorf("Rate1 this(%v) Not Equal that(%v)", this.Rate1, that1.Rate1)
	}
	if this.Rate5 != that1.Rate5 {
		return fmt.Errorf("Rate5 this(%v) Not Equal that(%v)", this.Rate5, that1.Rate5)
	}
	if this.Rate15 != that1.Rate15 {
		return fmt.Errorf("Rate15 this(%v) Not Equal that(%v)", this.Rate15, that1.Rate15)
	}
	return nil
}
func (this *Rates) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Rates)
	if !ok {
		that2, ok := that.(Rates)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Rate1 != that1.Rate1 {
		return false
	}
	if this.Rate5 != that1.Rate5 {
		return false
	}
	if this.Rate15 != that1.Rate15 {
		return false
	}
	return true
}
func (this *SystemStats) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*SystemStats)
	if !ok {
		that2, ok := that.(SystemStats)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *SystemStats")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *SystemStats but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *SystemStats but is not nil && this == nil")
	}
	if !this.Load.Equal(that1.Load) {
		return fmt.Errorf("Load this(%v) Not Equal that(%v)", this.Load, that1.Load)
	}
	if !this.Cpu.Equal(that1.Cpu) {
		return fmt.Errorf("Cpu this(%v) Not Equal that(%v)", this.Cpu, that1.Cpu)
	}
	if !this.Memory.Equal(that1.Memory) {
		return fmt.Errorf("Memory this(%v) Not Equal that(%v)", this.Memory, that1.Memory)
	}
	return nil
}
func (this *SystemStats) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SystemStats)
	if !ok {
		that2, ok := that.(SystemStats)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Load.Equal(that1.Load) {
		return false
	}
	if !this.Cpu.Equal(that1.Cpu) {
		return false
	}
	if !this.Memory.Equal(that1.Memory) {
		return false
	}
	return true
}
func (this *SystemStats_Loadstats) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*SystemStats_Loadstats)
	if !ok {
		that2, ok := that.(SystemStats_Loadstats)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *SystemStats_Loadstats")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *SystemStats_Loadstats but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *SystemStats_Loadstats but is not nil && this == nil")
	}
	if this.Load1 != that1.Load1 {
		return fmt.Errorf("Load1 this(%v) Not Equal that(%v)", this.Load1, that1.Load1)
	}
	if this.Load5 != that1.Load5 {
		return fmt.Errorf("Load5 this(%v) Not Equal that(%v)", this.Load5, that1.Load5)
	}
	if this.Load15 != that1.Load15 {
		return fmt.Errorf("Load15 this(%v) Not Equal that(%v)", this.Load15, that1.Load15)
	}
	return nil
}
func (this *SystemStats_Loadstats) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SystemStats_Loadstats)
	if !ok {
		that2, ok := that.(SystemStats_Loadstats)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Load1 != that1.Load1 {
		return false
	}
	if this.Load5 != that1.Load5 {
		return false
	}
	if this.Load15 != that1.Load15 {
		return false
	}
	return true
}
func (this *SystemStats_CPUStats) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*SystemStats_CPUStats)
	if !ok {
		that2, ok := that.(SystemStats_CPUStats)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *SystemStats_CPUStats")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *SystemStats_CPUStats but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *SystemStats_CPUStats but is not nil && this == nil")
	}
	if this.User != that1.User {
		return fmt.Errorf("User this(%v) Not Equal that(%v)", this.User, that1.User)
	}
	if this.System != that1.System {
		return fmt.Errorf("System this(%v) Not Equal that(%v)", this.System, that1.System)
	}
	if this.Idle != that1.Idle {
		return fmt.Errorf("Idle this(%v) Not Equal that(%v)", this.Idle, that1.Idle)
	}
	if this.Percentage != that1.Percentage {
		return fmt.Errorf("Percentage this(%v) Not Equal that(%v)", this.Percentage, that1.Percentage)
	}
	return nil
}
func (this *SystemStats_CPUStats) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SystemStats_CPUStats)
	if !ok {
		that2, ok := that.(SystemStats_CPUStats)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.User != that1.User {
		return false
	}
	if this.System != that1.System {
		return false
	}
	if this.Idle != that1.Idle {
		return false
	}
	if this.Percentage != that1.Percentage {
		return false
	}
	return true
}
func (this *SystemStats_MemoryStats) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*SystemStats_MemoryStats)
	if !ok {
		that2, ok := that.(SystemStats_MemoryStats)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *SystemStats_MemoryStats")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *SystemStats_MemoryStats but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *SystemStats_MemoryStats but is not nil && this == nil")
	}
	if this.Total != that1.Total {
		return fmt.Errorf("Total this(%v) Not Equal that(%v)", this.Total, that1.Total)
	}
	if this.Available != that1.Available {
		return fmt.Errorf("Available this(%v) Not Equal that(%v)", this.Available, that1.Available)
	}
	if this.Used != that1.Used {
		return fmt.Errorf("Used this(%v) Not Equal that(%v)", this.Used, that1.Used)
	}
	return nil
}
func (this *SystemStats_MemoryStats) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SystemStats_MemoryStats)
	if !ok {
		that2, ok := that.(SystemStats_MemoryStats)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Total != that1.Total {
		return false
	}
	if this.Available != that1.Available {
		return false
	}
	if this.Used != that1.Used {
		return false
	}
	return true
}
func (this *ComponentStats) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ComponentStats)
	if !ok {
		that2, ok := that.(ComponentStats)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ComponentStats")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ComponentStats but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ComponentStats but is not nil && this == nil")
	}
	if this.Uptime != that1.Uptime {
		return fmt.Errorf("Uptime this(%v) Not Equal that(%v)", this.Uptime, that1.Uptime)
	}
	if !this.Cpu.Equal(that1.Cpu) {
		return fmt.Errorf("Cpu this(%v) Not Equal that(%v)", this.Cpu, that1.Cpu)
	}
	if !this.Memory.Equal(that1.Memory) {
		return fmt.Errorf("Memory this(%v) Not Equal that(%v)", this.Memory, that1.Memory)
	}
	if this.Goroutines != that1.Goroutines {
		return fmt.Errorf("Goroutines this(%v) Not Equal that(%v)", this.Goroutines, that1.Goroutines)
	}
	if this.GcCpuFraction != that1.GcCpuFraction {
		return fmt.Errorf("GcCpuFraction this(%v) Not Equal that(%v)", this.GcCpuFraction, that1.GcCpuFraction)
	}
	return nil
}
func (this *ComponentStats) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ComponentStats)
	if !ok {
		that2, ok := that.(ComponentStats)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Uptime != that1.Uptime {
		return false
	}
	if !this.Cpu.Equal(that1.Cpu) {
		return false
	}
	if !this.Memory.Equal(that1.Memory) {
		return false
	}
	if this.Goroutines != that1.Goroutines {
		return false
	}
	if this.GcCpuFraction != that1.GcCpuFraction {
		return false
	}
	return true
}
func (this *ComponentStats_CPUStats) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ComponentStats_CPUStats)
	if !ok {
		that2, ok := that.(ComponentStats_CPUStats)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ComponentStats_CPUStats")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ComponentStats_CPUStats but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ComponentStats_CPUStats but is not nil && this == nil")
	}
	if this.User != that1.User {
		return fmt.Errorf("User this(%v) Not Equal that(%v)", this.User, that1.User)
	}
	if this.System != that1.System {
		return fmt.Errorf("System this(%v) Not Equal that(%v)", this.System, that1.System)
	}
	if this.Idle != that1.Idle {
		return fmt.Errorf("Idle this(%v) Not Equal that(%v)", this.Idle, that1.Idle)
	}
	if this.Percentage != that1.Percentage {
		return fmt.Errorf("Percentage this(%v) Not Equal that(%v)", this.Percentage, that1.Percentage)
	}
	return nil
}
func (this *ComponentStats_CPUStats) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ComponentStats_CPUStats)
	if !ok {
		that2, ok := that.(ComponentStats_CPUStats)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.User != that1.User {
		return false
	}
	if this.System != that1.System {
		return false
	}
	if this.Idle != that1.Idle {
		return false
	}
	if this.Percentage != that1.Percentage {
		return false
	}
	return true
}
func (this *ComponentStats_MemoryStats) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ComponentStats_MemoryStats)
	if !ok {
		that2, ok := that.(ComponentStats_MemoryStats)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ComponentStats_MemoryStats")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ComponentStats_MemoryStats but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ComponentStats_MemoryStats but is not nil && this == nil")
	}
	if this.Memory != that1.Memory {
		return fmt.Errorf("Memory this(%v) Not Equal that(%v)", this.Memory, that1.Memory)
	}
	if this.Swap != that1.Swap {
		return fmt.Errorf("Swap this(%v) Not Equal that(%v)", this.Swap, that1.Swap)
	}
	if this.Heap != that1.Heap {
		return fmt.Errorf("Heap this(%v) Not Equal that(%v)", this.Heap, that1.Heap)
	}
	if this.Stack != that1.Stack {
		return fmt.Errorf("Stack this(%v) Not Equal that(%v)", this.Stack, that1.Stack)
	}
	return nil
}
func (this *ComponentStats_MemoryStats) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ComponentStats_MemoryStats)
	if !ok {
		that2, ok := that.(ComponentStats_MemoryStats)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Memory != that1.Memory {
		return false
	}
	if this.Swap != that1.Swap {
		return false
	}
	if this.Heap != that1.Heap {
		return false
	}
	if this.Stack != that1.Stack {
		return false
	}
	return true
}
func (m *Percentiles) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Percentiles) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Percentile1 != 0 {
		dAtA[i] = 0xd
		i++
		i = encodeFixed32Api(dAtA, i, uint32(math.Float32bits(float32(m.Percentile1))))
	}
	if m.Percentile5 != 0 {
		dAtA[i] = 0x15
		i++
		i = encodeFixed32Api(dAtA, i, uint32(math.Float32bits(float32(m.Percentile5))))
	}
	if m.Percentile10 != 0 {
		dAtA[i] = 0x1d
		i++
		i = encodeFixed32Api(dAtA, i, uint32(math.Float32bits(float32(m.Percentile10))))
	}
	if m.Percentile25 != 0 {
		dAtA[i] = 0x25
		i++
		i = encodeFixed32Api(dAtA, i, uint32(math.Float32bits(float32(m.Percentile25))))
	}
	if m.Percentile50 != 0 {
		dAtA[i] = 0x2d
		i++
		i = encodeFixed32Api(dAtA, i, uint32(math.Float32bits(float32(m.Percentile50))))
	}
	if m.Percentile75 != 0 {
		dAtA[i] = 0x35
		i++
		i = encodeFixed32Api(dAtA, i, uint32(math.Float32bits(float32(m.Percentile75))))
	}
	if m.Percentile90 != 0 {
		dAtA[i] = 0x3d
		i++
		i = encodeFixed32Api(dAtA, i, uint32(math.Float32bits(float32(m.Percentile90))))
	}
	if m.Percentile95 != 0 {
		dAtA[i] = 0x45
		i++
		i = encodeFixed32Api(dAtA, i, uint32(math.Float32bits(float32(m.Percentile95))))
	}
	if m.Percentile99 != 0 {
		dAtA[i] = 0x4d
		i++
		i = encodeFixed32Api(dAtA, i, uint32(math.Float32bits(float32(m.Percentile99))))
	}
	return i, nil
}

func (m *Rates) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Rates) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Rate1 != 0 {
		dAtA[i] = 0xd
		i++
		i = encodeFixed32Api(dAtA, i, uint32(math.Float32bits(float32(m.Rate1))))
	}
	if m.Rate5 != 0 {
		dAtA[i] = 0x15
		i++
		i = encodeFixed32Api(dAtA, i, uint32(math.Float32bits(float32(m.Rate5))))
	}
	if m.Rate15 != 0 {
		dAtA[i] = 0x1d
		i++
		i = encodeFixed32Api(dAtA, i, uint32(math.Float32bits(float32(m.Rate15))))
	}
	return i, nil
}

func (m *SystemStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SystemStats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Load != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Load.Size()))
		n1, err := m.Load.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Cpu != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Cpu.Size()))
		n2, err := m.Cpu.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.Memory != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Memory.Size()))
		n3, err := m.Memory.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *SystemStats_Loadstats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SystemStats_Loadstats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Load1 != 0 {
		dAtA[i] = 0xd
		i++
		i = encodeFixed32Api(dAtA, i, uint32(math.Float32bits(float32(m.Load1))))
	}
	if m.Load5 != 0 {
		dAtA[i] = 0x15
		i++
		i = encodeFixed32Api(dAtA, i, uint32(math.Float32bits(float32(m.Load5))))
	}
	if m.Load15 != 0 {
		dAtA[i] = 0x1d
		i++
		i = encodeFixed32Api(dAtA, i, uint32(math.Float32bits(float32(m.Load15))))
	}
	return i, nil
}

func (m *SystemStats_CPUStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SystemStats_CPUStats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.User != 0 {
		dAtA[i] = 0xd
		i++
		i = encodeFixed32Api(dAtA, i, uint32(math.Float32bits(float32(m.User))))
	}
	if m.System != 0 {
		dAtA[i] = 0x15
		i++
		i = encodeFixed32Api(dAtA, i, uint32(math.Float32bits(float32(m.System))))
	}
	if m.Idle != 0 {
		dAtA[i] = 0x1d
		i++
		i = encodeFixed32Api(dAtA, i, uint32(math.Float32bits(float32(m.Idle))))
	}
	if m.Percentage != 0 {
		dAtA[i] = 0x25
		i++
		i = encodeFixed32Api(dAtA, i, uint32(math.Float32bits(float32(m.Percentage))))
	}
	return i, nil
}

func (m *SystemStats_MemoryStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SystemStats_MemoryStats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Total != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Total))
	}
	if m.Available != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Available))
	}
	if m.Used != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Used))
	}
	return i, nil
}

func (m *ComponentStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ComponentStats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uptime != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Uptime))
	}
	if m.Cpu != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Cpu.Size()))
		n4, err := m.Cpu.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.Memory != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Memory.Size()))
		n5, err := m.Memory.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.Goroutines != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Goroutines))
	}
	if m.GcCpuFraction != 0 {
		dAtA[i] = 0x2d
		i++
		i = encodeFixed32Api(dAtA, i, uint32(math.Float32bits(float32(m.GcCpuFraction))))
	}
	return i, nil
}

func (m *ComponentStats_CPUStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ComponentStats_CPUStats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.User != 0 {
		dAtA[i] = 0xd
		i++
		i = encodeFixed32Api(dAtA, i, uint32(math.Float32bits(float32(m.User))))
	}
	if m.System != 0 {
		dAtA[i] = 0x15
		i++
		i = encodeFixed32Api(dAtA, i, uint32(math.Float32bits(float32(m.System))))
	}
	if m.Idle != 0 {
		dAtA[i] = 0x1d
		i++
		i = encodeFixed32Api(dAtA, i, uint32(math.Float32bits(float32(m.Idle))))
	}
	if m.Percentage != 0 {
		dAtA[i] = 0x25
		i++
		i = encodeFixed32Api(dAtA, i, uint32(math.Float32bits(float32(m.Percentage))))
	}
	return i, nil
}

func (m *ComponentStats_MemoryStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ComponentStats_MemoryStats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Memory != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Memory))
	}
	if m.Swap != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Swap))
	}
	if m.Heap != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Heap))
	}
	if m.Stack != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Stack))
	}
	return i, nil
}

func encodeFixed64Api(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Api(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintApi(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Percentiles) Size() (n int) {
	var l int
	_ = l
	if m.Percentile1 != 0 {
		n += 5
	}
	if m.Percentile5 != 0 {
		n += 5
	}
	if m.Percentile10 != 0 {
		n += 5
	}
	if m.Percentile25 != 0 {
		n += 5
	}
	if m.Percentile50 != 0 {
		n += 5
	}
	if m.Percentile75 != 0 {
		n += 5
	}
	if m.Percentile90 != 0 {
		n += 5
	}
	if m.Percentile95 != 0 {
		n += 5
	}
	if m.Percentile99 != 0 {
		n += 5
	}
	return n
}

func (m *Rates) Size() (n int) {
	var l int
	_ = l
	if m.Rate1 != 0 {
		n += 5
	}
	if m.Rate5 != 0 {
		n += 5
	}
	if m.Rate15 != 0 {
		n += 5
	}
	return n
}

func (m *SystemStats) Size() (n int) {
	var l int
	_ = l
	if m.Load != nil {
		l = m.Load.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Cpu != nil {
		l = m.Cpu.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Memory != nil {
		l = m.Memory.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *SystemStats_Loadstats) Size() (n int) {
	var l int
	_ = l
	if m.Load1 != 0 {
		n += 5
	}
	if m.Load5 != 0 {
		n += 5
	}
	if m.Load15 != 0 {
		n += 5
	}
	return n
}

func (m *SystemStats_CPUStats) Size() (n int) {
	var l int
	_ = l
	if m.User != 0 {
		n += 5
	}
	if m.System != 0 {
		n += 5
	}
	if m.Idle != 0 {
		n += 5
	}
	if m.Percentage != 0 {
		n += 5
	}
	return n
}

func (m *SystemStats_MemoryStats) Size() (n int) {
	var l int
	_ = l
	if m.Total != 0 {
		n += 1 + sovApi(uint64(m.Total))
	}
	if m.Available != 0 {
		n += 1 + sovApi(uint64(m.Available))
	}
	if m.Used != 0 {
		n += 1 + sovApi(uint64(m.Used))
	}
	return n
}

func (m *ComponentStats) Size() (n int) {
	var l int
	_ = l
	if m.Uptime != 0 {
		n += 1 + sovApi(uint64(m.Uptime))
	}
	if m.Cpu != nil {
		l = m.Cpu.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Memory != nil {
		l = m.Memory.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Goroutines != 0 {
		n += 1 + sovApi(uint64(m.Goroutines))
	}
	if m.GcCpuFraction != 0 {
		n += 5
	}
	return n
}

func (m *ComponentStats_CPUStats) Size() (n int) {
	var l int
	_ = l
	if m.User != 0 {
		n += 5
	}
	if m.System != 0 {
		n += 5
	}
	if m.Idle != 0 {
		n += 5
	}
	if m.Percentage != 0 {
		n += 5
	}
	return n
}

func (m *ComponentStats_MemoryStats) Size() (n int) {
	var l int
	_ = l
	if m.Memory != 0 {
		n += 1 + sovApi(uint64(m.Memory))
	}
	if m.Swap != 0 {
		n += 1 + sovApi(uint64(m.Swap))
	}
	if m.Heap != 0 {
		n += 1 + sovApi(uint64(m.Heap))
	}
	if m.Stack != 0 {
		n += 1 + sovApi(uint64(m.Stack))
	}
	return n
}

func sovApi(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozApi(x uint64) (n int) {
	return sovApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Percentiles) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Percentiles{`,
		`Percentile1:` + fmt.Sprintf("%v", this.Percentile1) + `,`,
		`Percentile5:` + fmt.Sprintf("%v", this.Percentile5) + `,`,
		`Percentile10:` + fmt.Sprintf("%v", this.Percentile10) + `,`,
		`Percentile25:` + fmt.Sprintf("%v", this.Percentile25) + `,`,
		`Percentile50:` + fmt.Sprintf("%v", this.Percentile50) + `,`,
		`Percentile75:` + fmt.Sprintf("%v", this.Percentile75) + `,`,
		`Percentile90:` + fmt.Sprintf("%v", this.Percentile90) + `,`,
		`Percentile95:` + fmt.Sprintf("%v", this.Percentile95) + `,`,
		`Percentile99:` + fmt.Sprintf("%v", this.Percentile99) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Rates) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Rates{`,
		`Rate1:` + fmt.Sprintf("%v", this.Rate1) + `,`,
		`Rate5:` + fmt.Sprintf("%v", this.Rate5) + `,`,
		`Rate15:` + fmt.Sprintf("%v", this.Rate15) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SystemStats) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SystemStats{`,
		`Load:` + strings.Replace(fmt.Sprintf("%v", this.Load), "SystemStats_Loadstats", "SystemStats_Loadstats", 1) + `,`,
		`Cpu:` + strings.Replace(fmt.Sprintf("%v", this.Cpu), "SystemStats_CPUStats", "SystemStats_CPUStats", 1) + `,`,
		`Memory:` + strings.Replace(fmt.Sprintf("%v", this.Memory), "SystemStats_MemoryStats", "SystemStats_MemoryStats", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SystemStats_Loadstats) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SystemStats_Loadstats{`,
		`Load1:` + fmt.Sprintf("%v", this.Load1) + `,`,
		`Load5:` + fmt.Sprintf("%v", this.Load5) + `,`,
		`Load15:` + fmt.Sprintf("%v", this.Load15) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SystemStats_CPUStats) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SystemStats_CPUStats{`,
		`User:` + fmt.Sprintf("%v", this.User) + `,`,
		`System:` + fmt.Sprintf("%v", this.System) + `,`,
		`Idle:` + fmt.Sprintf("%v", this.Idle) + `,`,
		`Percentage:` + fmt.Sprintf("%v", this.Percentage) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SystemStats_MemoryStats) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SystemStats_MemoryStats{`,
		`Total:` + fmt.Sprintf("%v", this.Total) + `,`,
		`Available:` + fmt.Sprintf("%v", this.Available) + `,`,
		`Used:` + fmt.Sprintf("%v", this.Used) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ComponentStats) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ComponentStats{`,
		`Uptime:` + fmt.Sprintf("%v", this.Uptime) + `,`,
		`Cpu:` + strings.Replace(fmt.Sprintf("%v", this.Cpu), "ComponentStats_CPUStats", "ComponentStats_CPUStats", 1) + `,`,
		`Memory:` + strings.Replace(fmt.Sprintf("%v", this.Memory), "ComponentStats_MemoryStats", "ComponentStats_MemoryStats", 1) + `,`,
		`Goroutines:` + fmt.Sprintf("%v", this.Goroutines) + `,`,
		`GcCpuFraction:` + fmt.Sprintf("%v", this.GcCpuFraction) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ComponentStats_CPUStats) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ComponentStats_CPUStats{`,
		`User:` + fmt.Sprintf("%v", this.User) + `,`,
		`System:` + fmt.Sprintf("%v", this.System) + `,`,
		`Idle:` + fmt.Sprintf("%v", this.Idle) + `,`,
		`Percentage:` + fmt.Sprintf("%v", this.Percentage) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ComponentStats_MemoryStats) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ComponentStats_MemoryStats{`,
		`Memory:` + fmt.Sprintf("%v", this.Memory) + `,`,
		`Swap:` + fmt.Sprintf("%v", this.Swap) + `,`,
		`Heap:` + fmt.Sprintf("%v", this.Heap) + `,`,
		`Stack:` + fmt.Sprintf("%v", this.Stack) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringApi(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Percentiles) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Percentiles: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Percentiles: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Percentile1", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.Percentile1 = float32(math.Float32frombits(v))
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Percentile5", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.Percentile5 = float32(math.Float32frombits(v))
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Percentile10", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.Percentile10 = float32(math.Float32frombits(v))
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Percentile25", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.Percentile25 = float32(math.Float32frombits(v))
		case 5:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Percentile50", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.Percentile50 = float32(math.Float32frombits(v))
		case 6:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Percentile75", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.Percentile75 = float32(math.Float32frombits(v))
		case 7:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Percentile90", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.Percentile90 = float32(math.Float32frombits(v))
		case 8:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Percentile95", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.Percentile95 = float32(math.Float32frombits(v))
		case 9:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Percentile99", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.Percentile99 = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Rates) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Rates: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Rates: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rate1", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.Rate1 = float32(math.Float32frombits(v))
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rate5", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.Rate5 = float32(math.Float32frombits(v))
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rate15", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.Rate15 = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SystemStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SystemStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SystemStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Load", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Load == nil {
				m.Load = &SystemStats_Loadstats{}
			}
			if err := m.Load.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cpu", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Cpu == nil {
				m.Cpu = &SystemStats_CPUStats{}
			}
			if err := m.Cpu.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Memory", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Memory == nil {
				m.Memory = &SystemStats_MemoryStats{}
			}
			if err := m.Memory.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SystemStats_Loadstats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Loadstats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Loadstats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Load1", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.Load1 = float32(math.Float32frombits(v))
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Load5", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.Load5 = float32(math.Float32frombits(v))
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Load15", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.Load15 = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SystemStats_CPUStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CPUStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CPUStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.User = float32(math.Float32frombits(v))
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field System", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.System = float32(math.Float32frombits(v))
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Idle", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.Idle = float32(math.Float32frombits(v))
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Percentage", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.Percentage = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SystemStats_MemoryStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MemoryStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MemoryStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Available", wireType)
			}
			m.Available = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Available |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Used", wireType)
			}
			m.Used = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Used |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ComponentStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ComponentStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ComponentStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uptime", wireType)
			}
			m.Uptime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uptime |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cpu", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Cpu == nil {
				m.Cpu = &ComponentStats_CPUStats{}
			}
			if err := m.Cpu.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Memory", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Memory == nil {
				m.Memory = &ComponentStats_MemoryStats{}
			}
			if err := m.Memory.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Goroutines", wireType)
			}
			m.Goroutines = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Goroutines |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field GcCpuFraction", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.GcCpuFraction = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ComponentStats_CPUStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CPUStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CPUStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.User = float32(math.Float32frombits(v))
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field System", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.System = float32(math.Float32frombits(v))
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Idle", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.Idle = float32(math.Float32frombits(v))
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Percentage", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.Percentage = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ComponentStats_MemoryStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MemoryStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MemoryStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Memory", wireType)
			}
			m.Memory = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Memory |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Swap", wireType)
			}
			m.Swap = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Swap |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Heap", wireType)
			}
			m.Heap = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Heap |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stack", wireType)
			}
			m.Stack = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Stack |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthApi
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowApi
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipApi(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthApi = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApi   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("github.com/TheThingsNetwork/api/api.proto", fileDescriptorApi) }

var fileDescriptorApi = []byte{
	// 625 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x54, 0xcd, 0x6a, 0xdb, 0x4c,
	0x14, 0x8d, 0x6c, 0xc5, 0x5f, 0x72, 0xf5, 0xb5, 0x85, 0x21, 0x84, 0xa9, 0x09, 0x4a, 0xf0, 0xa2,
	0xb4, 0x14, 0x14, 0xd7, 0xad, 0x30, 0x5e, 0x26, 0x86, 0x42, 0xe8, 0x9f, 0x50, 0x92, 0x4d, 0x37,
	0x61, 0x2c, 0x4f, 0x65, 0x35, 0x92, 0x46, 0x48, 0xa3, 0x86, 0x6c, 0x4a, 0x1f, 0xa1, 0x8f, 0x51,
	0xb2, 0xee, 0x43, 0x74, 0x53, 0xe8, 0xb2, 0xcb, 0xc4, 0x7d, 0x91, 0x32, 0xa3, 0xb1, 0x2a, 0x8f,
	0x03, 0xdd, 0x75, 0x61, 0xb8, 0xf7, 0xcc, 0x99, 0x73, 0x7f, 0x8e, 0x35, 0xf0, 0x28, 0x8c, 0xf8,
	0xac, 0x9c, 0x38, 0x01, 0x4b, 0xf6, 0x4f, 0x66, 0xf4, 0x64, 0x16, 0xa5, 0x61, 0xf1, 0x9a, 0xf2,
	0x0b, 0x96, 0x9f, 0xef, 0x93, 0x2c, 0x12, 0x3f, 0x27, 0xcb, 0x19, 0x67, 0xa8, 0x4d, 0xb2, 0xa8,
	0xf7, 0xbd, 0x05, 0x96, 0x47, 0xf3, 0x80, 0xa6, 0x3c, 0x8a, 0x69, 0x81, 0xf6, 0xc0, 0xca, 0xea,
	0xf4, 0x09, 0x36, 0xf6, 0x8c, 0x87, 0x2d, 0xbf, 0x09, 0x2d, 0x33, 0x5c, 0xdc, 0xd2, 0x19, 0x2e,
	0xea, 0xc1, 0xff, 0x8d, 0x0b, 0x7d, 0xdc, 0x96, 0x94, 0x25, 0x6c, 0x99, 0x33, 0x70, 0xb1, 0xa9,
	0x73, 0x06, 0x9a, 0x8e, 0xdb, 0xc7, 0xeb, 0x3a, 0xc7, 0xd5, 0x74, 0x86, 0x2e, 0xee, 0xe8, 0x9c,
	0xa1, 0xa6, 0x33, 0xea, 0xe3, 0xff, 0x74, 0xce, 0x48, 0xd3, 0x19, 0xb9, 0x78, 0x63, 0x85, 0xa3,
	0xeb, 0x8c, 0xf0, 0xe6, 0x0a, 0x67, 0xd4, 0x7b, 0x01, 0xeb, 0x3e, 0xe1, 0xb4, 0x40, 0x5b, 0xb0,
	0x9e, 0x13, 0x5e, 0xaf, 0xb0, 0x4a, 0x16, 0xe8, 0x62, 0x6d, 0x55, 0x82, 0xb6, 0xa1, 0x23, 0x8f,
	0x5d, 0xb5, 0x2a, 0x95, 0xf5, 0xbe, 0xb6, 0xc1, 0x3a, 0xbe, 0x2c, 0x38, 0x4d, 0x8e, 0x39, 0xe1,
	0x05, 0x72, 0xc0, 0x8c, 0x19, 0x99, 0x4a, 0x49, 0x6b, 0xd0, 0x75, 0x84, 0x97, 0x8d, 0x73, 0xe7,
	0x25, 0x23, 0xd3, 0x42, 0x44, 0xbe, 0xe4, 0xa1, 0xc7, 0xd0, 0x0e, 0xb2, 0x52, 0xd6, 0xb2, 0x06,
	0xf7, 0x57, 0xe8, 0x63, 0xef, 0x54, 0x06, 0xbe, 0x60, 0xa1, 0x67, 0xd0, 0x49, 0x68, 0xc2, 0xf2,
	0x4b, 0xd9, 0x84, 0x35, 0xd8, 0x59, 0xe1, 0xbf, 0x92, 0xc7, 0xd5, 0x15, 0xc5, 0xed, 0xbe, 0x81,
	0xcd, 0xba, 0xaa, 0x98, 0x4e, 0xd4, 0xad, 0x67, 0x96, 0xc9, 0x02, 0xad, 0x67, 0x96, 0x89, 0x98,
	0x59, 0x1e, 0xd7, 0x33, 0x57, 0x59, 0xf7, 0x3d, 0x6c, 0x2c, 0xfa, 0x42, 0x08, 0xcc, 0xb2, 0xa0,
	0xb9, 0x92, 0x93, 0xb1, 0xb8, 0x57, 0xc8, 0x9e, 0x94, 0x9c, 0xca, 0x04, 0x37, 0x9a, 0xc6, 0x54,
	0xa9, 0xc9, 0x18, 0xd9, 0x00, 0xca, 0x1c, 0x12, 0x52, 0xf5, 0x17, 0x6b, 0x20, 0xdd, 0x53, 0xb0,
	0x1a, 0x33, 0x89, 0x46, 0x39, 0xe3, 0x24, 0x96, 0xf5, 0x4c, 0xbf, 0x4a, 0xd0, 0x0e, 0x6c, 0x92,
	0x0f, 0x24, 0x8a, 0xc9, 0x24, 0xa6, 0xb2, 0xa6, 0xe9, 0xff, 0x01, 0x54, 0x8b, 0x53, 0x59, 0xd6,
	0x94, 0x2d, 0x4e, 0x7b, 0x57, 0x6d, 0xb8, 0x3b, 0x66, 0x49, 0xc6, 0x52, 0x9a, 0xf2, 0x4a, 0x7a,
	0x1b, 0x3a, 0x65, 0xc6, 0xa3, 0x84, 0x2a, 0x6d, 0x95, 0x21, 0xa7, 0xe9, 0x50, 0xb5, 0xf1, 0xe5,
	0x9b, 0x9a, 0x49, 0x43, 0xcd, 0xa4, 0xdd, 0xdb, 0xae, 0xdc, 0xe2, 0x93, 0x58, 0x45, 0xc8, 0x72,
	0x56, 0xf2, 0x28, 0xa5, 0x85, 0x5c, 0x85, 0xe9, 0x37, 0x10, 0xf4, 0x00, 0xee, 0x85, 0xc1, 0x59,
	0x90, 0x95, 0x67, 0xef, 0x72, 0x12, 0xf0, 0x88, 0xa5, 0xea, 0x73, 0xbb, 0x13, 0x06, 0xe3, 0xac,
	0x7c, 0xae, 0xc0, 0x7f, 0x6a, 0x4f, 0xb0, 0x6c, 0xcf, 0x76, 0x3d, 0xbb, 0xda, 0xa1, 0x1a, 0x0d,
	0x81, 0x59, 0x5c, 0x90, 0x4c, 0x79, 0x23, 0x63, 0x81, 0xcd, 0x28, 0xc9, 0x30, 0x54, 0x98, 0x88,
	0x85, 0xbd, 0x05, 0x27, 0xc1, 0x39, 0xb6, 0x2a, 0x7b, 0x65, 0x72, 0xf8, 0xf1, 0xe7, 0x8d, 0xbd,
	0x76, 0x7d, 0x63, 0x1b, 0x9f, 0xe6, 0xb6, 0xf1, 0x65, 0x6e, 0x1b, 0xdf, 0xe6, 0xb6, 0xf1, 0x63,
	0x6e, 0x1b, 0xd7, 0x73, 0xdb, 0xf8, 0xfc, 0xcb, 0x5e, 0x03, 0xcc, 0xf2, 0xd0, 0xe1, 0x33, 0xca,
	0xe5, 0x5b, 0x9a, 0x56, 0x6f, 0xa9, 0xd8, 0xfb, 0xe1, 0xc6, 0x81, 0x77, 0xe4, 0x89, 0xb7, 0xd4,
	0x33, 0xde, 0xee, 0xfe, 0xe5, 0xe1, 0xbd, 0x6a, 0x6d, 0xe9, 0xb0, 0x73, 0xe0, 0x1d, 0x4d, 0x3a,
	0xf2, 0x31, 0x7e, 0xfa, 0x3b, 0x00, 0x00, 0xff, 0xff, 0x59, 0x02, 0x9a, 0xef, 0xb9, 0x05, 0x00,
	0x00,
}
