/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: github.com/TheThingsNetwork/api/discovery/discovery.proto
 *
 */

/*
 * Copyright 2017, gRPC Authors All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import Foundation
import Dispatch
import gRPC

/// Type for errors thrown from generated server code.
internal enum Discovery_DiscoveryServerError : Error {
  case endOfStream
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol Discovery_DiscoveryProvider {
  func announce(request : Discovery_Announcement, session : Discovery_DiscoveryAnnounceSession) throws -> Google_Protobuf_Empty
  func getall(request : Discovery_GetServiceRequest, session : Discovery_DiscoveryGetAllSession) throws -> Discovery_AnnouncementsResponse
  func get(request : Discovery_GetRequest, session : Discovery_DiscoveryGetSession) throws -> Discovery_Announcement
  func addmetadata(request : Discovery_MetadataRequest, session : Discovery_DiscoveryAddMetadataSession) throws -> Google_Protobuf_Empty
  func deletemetadata(request : Discovery_MetadataRequest, session : Discovery_DiscoveryDeleteMetadataSession) throws -> Google_Protobuf_Empty
  func getbyappid(request : Discovery_GetByAppIDRequest, session : Discovery_DiscoveryGetByAppIDSession) throws -> Discovery_Announcement
  func getbygatewayid(request : Discovery_GetByGatewayIDRequest, session : Discovery_DiscoveryGetByGatewayIDSession) throws -> Discovery_Announcement
  func getbyappeui(request : Discovery_GetByAppEUIRequest, session : Discovery_DiscoveryGetByAppEUISession) throws -> Discovery_Announcement
}

/// Common properties available in each service session.
internal class Discovery_DiscoverySession {
  fileprivate var handler : gRPC.Handler
  internal var requestMetadata : Metadata { return handler.requestMetadata }

  internal var statusCode : Int = 0
  internal var statusMessage : String = "OK"
  internal var initialMetadata : Metadata = Metadata()
  internal var trailingMetadata : Metadata = Metadata()

  fileprivate init(handler:gRPC.Handler) {
    self.handler = handler
  }
}

// Announce (Unary)
internal class Discovery_DiscoveryAnnounceSession : Discovery_DiscoverySession {
  private var provider : Discovery_DiscoveryProvider

  /// Create a session.
  fileprivate init(handler:gRPC.Handler, provider: Discovery_DiscoveryProvider) {
    self.provider = provider
    super.init(handler:handler)
  }

  /// Run the session. Internal.
  fileprivate func run(queue:DispatchQueue) throws {
    try handler.receiveMessage(initialMetadata:initialMetadata) {(requestData) in
      if let requestData = requestData {
        let requestMessage = try Discovery_Announcement(serializedData:requestData)
        let replyMessage = try self.provider.announce(request:requestMessage, session: self)
        try self.handler.sendResponse(message:replyMessage.serializedData(),
                                      statusCode:self.statusCode,
                                      statusMessage:self.statusMessage,
                                      trailingMetadata:self.trailingMetadata)
      }
    }
  }
}

// GetAll (Unary)
internal class Discovery_DiscoveryGetAllSession : Discovery_DiscoverySession {
  private var provider : Discovery_DiscoveryProvider

  /// Create a session.
  fileprivate init(handler:gRPC.Handler, provider: Discovery_DiscoveryProvider) {
    self.provider = provider
    super.init(handler:handler)
  }

  /// Run the session. Internal.
  fileprivate func run(queue:DispatchQueue) throws {
    try handler.receiveMessage(initialMetadata:initialMetadata) {(requestData) in
      if let requestData = requestData {
        let requestMessage = try Discovery_GetServiceRequest(serializedData:requestData)
        let replyMessage = try self.provider.getall(request:requestMessage, session: self)
        try self.handler.sendResponse(message:replyMessage.serializedData(),
                                      statusCode:self.statusCode,
                                      statusMessage:self.statusMessage,
                                      trailingMetadata:self.trailingMetadata)
      }
    }
  }
}

// Get (Unary)
internal class Discovery_DiscoveryGetSession : Discovery_DiscoverySession {
  private var provider : Discovery_DiscoveryProvider

  /// Create a session.
  fileprivate init(handler:gRPC.Handler, provider: Discovery_DiscoveryProvider) {
    self.provider = provider
    super.init(handler:handler)
  }

  /// Run the session. Internal.
  fileprivate func run(queue:DispatchQueue) throws {
    try handler.receiveMessage(initialMetadata:initialMetadata) {(requestData) in
      if let requestData = requestData {
        let requestMessage = try Discovery_GetRequest(serializedData:requestData)
        let replyMessage = try self.provider.get(request:requestMessage, session: self)
        try self.handler.sendResponse(message:replyMessage.serializedData(),
                                      statusCode:self.statusCode,
                                      statusMessage:self.statusMessage,
                                      trailingMetadata:self.trailingMetadata)
      }
    }
  }
}

// AddMetadata (Unary)
internal class Discovery_DiscoveryAddMetadataSession : Discovery_DiscoverySession {
  private var provider : Discovery_DiscoveryProvider

  /// Create a session.
  fileprivate init(handler:gRPC.Handler, provider: Discovery_DiscoveryProvider) {
    self.provider = provider
    super.init(handler:handler)
  }

  /// Run the session. Internal.
  fileprivate func run(queue:DispatchQueue) throws {
    try handler.receiveMessage(initialMetadata:initialMetadata) {(requestData) in
      if let requestData = requestData {
        let requestMessage = try Discovery_MetadataRequest(serializedData:requestData)
        let replyMessage = try self.provider.addmetadata(request:requestMessage, session: self)
        try self.handler.sendResponse(message:replyMessage.serializedData(),
                                      statusCode:self.statusCode,
                                      statusMessage:self.statusMessage,
                                      trailingMetadata:self.trailingMetadata)
      }
    }
  }
}

// DeleteMetadata (Unary)
internal class Discovery_DiscoveryDeleteMetadataSession : Discovery_DiscoverySession {
  private var provider : Discovery_DiscoveryProvider

  /// Create a session.
  fileprivate init(handler:gRPC.Handler, provider: Discovery_DiscoveryProvider) {
    self.provider = provider
    super.init(handler:handler)
  }

  /// Run the session. Internal.
  fileprivate func run(queue:DispatchQueue) throws {
    try handler.receiveMessage(initialMetadata:initialMetadata) {(requestData) in
      if let requestData = requestData {
        let requestMessage = try Discovery_MetadataRequest(serializedData:requestData)
        let replyMessage = try self.provider.deletemetadata(request:requestMessage, session: self)
        try self.handler.sendResponse(message:replyMessage.serializedData(),
                                      statusCode:self.statusCode,
                                      statusMessage:self.statusMessage,
                                      trailingMetadata:self.trailingMetadata)
      }
    }
  }
}

// GetByAppID (Unary)
internal class Discovery_DiscoveryGetByAppIDSession : Discovery_DiscoverySession {
  private var provider : Discovery_DiscoveryProvider

  /// Create a session.
  fileprivate init(handler:gRPC.Handler, provider: Discovery_DiscoveryProvider) {
    self.provider = provider
    super.init(handler:handler)
  }

  /// Run the session. Internal.
  fileprivate func run(queue:DispatchQueue) throws {
    try handler.receiveMessage(initialMetadata:initialMetadata) {(requestData) in
      if let requestData = requestData {
        let requestMessage = try Discovery_GetByAppIDRequest(serializedData:requestData)
        let replyMessage = try self.provider.getbyappid(request:requestMessage, session: self)
        try self.handler.sendResponse(message:replyMessage.serializedData(),
                                      statusCode:self.statusCode,
                                      statusMessage:self.statusMessage,
                                      trailingMetadata:self.trailingMetadata)
      }
    }
  }
}

// GetByGatewayID (Unary)
internal class Discovery_DiscoveryGetByGatewayIDSession : Discovery_DiscoverySession {
  private var provider : Discovery_DiscoveryProvider

  /// Create a session.
  fileprivate init(handler:gRPC.Handler, provider: Discovery_DiscoveryProvider) {
    self.provider = provider
    super.init(handler:handler)
  }

  /// Run the session. Internal.
  fileprivate func run(queue:DispatchQueue) throws {
    try handler.receiveMessage(initialMetadata:initialMetadata) {(requestData) in
      if let requestData = requestData {
        let requestMessage = try Discovery_GetByGatewayIDRequest(serializedData:requestData)
        let replyMessage = try self.provider.getbygatewayid(request:requestMessage, session: self)
        try self.handler.sendResponse(message:replyMessage.serializedData(),
                                      statusCode:self.statusCode,
                                      statusMessage:self.statusMessage,
                                      trailingMetadata:self.trailingMetadata)
      }
    }
  }
}

// GetByAppEUI (Unary)
internal class Discovery_DiscoveryGetByAppEUISession : Discovery_DiscoverySession {
  private var provider : Discovery_DiscoveryProvider

  /// Create a session.
  fileprivate init(handler:gRPC.Handler, provider: Discovery_DiscoveryProvider) {
    self.provider = provider
    super.init(handler:handler)
  }

  /// Run the session. Internal.
  fileprivate func run(queue:DispatchQueue) throws {
    try handler.receiveMessage(initialMetadata:initialMetadata) {(requestData) in
      if let requestData = requestData {
        let requestMessage = try Discovery_GetByAppEUIRequest(serializedData:requestData)
        let replyMessage = try self.provider.getbyappeui(request:requestMessage, session: self)
        try self.handler.sendResponse(message:replyMessage.serializedData(),
                                      statusCode:self.statusCode,
                                      statusMessage:self.statusMessage,
                                      trailingMetadata:self.trailingMetadata)
      }
    }
  }
}


/// Main server for generated service
internal class Discovery_DiscoveryServer {
  private var address: String
  private var server: gRPC.Server
  private var provider: Discovery_DiscoveryProvider?

  /// Create a server that accepts insecure connections.
  internal init(address:String,
              provider:Discovery_DiscoveryProvider) {
    gRPC.initialize()
    self.address = address
    self.provider = provider
    self.server = gRPC.Server(address:address)
  }

  /// Create a server that accepts secure connections.
  internal init?(address:String,
               certificateURL:URL,
               keyURL:URL,
               provider:Discovery_DiscoveryProvider) {
    gRPC.initialize()
    self.address = address
    self.provider = provider
    guard
      let certificate = try? String(contentsOf: certificateURL, encoding: .utf8),
      let key = try? String(contentsOf: keyURL, encoding: .utf8)
      else {
        return nil
    }
    self.server = gRPC.Server(address:address, key:key, certs:certificate)
  }

  /// Start the server.
  internal func start(queue:DispatchQueue = DispatchQueue.global()) {
    guard let provider = self.provider else {
      assert(false) // the server requires a provider
    }
    server.run {(handler) in
      print("Server received request to " + handler.host
        + " calling " + handler.method
        + " from " + handler.caller
        + " with " + String(describing:handler.requestMetadata) )

      do {
        switch handler.method {
        case "/discovery.Discovery/Announce":
          try Discovery_DiscoveryAnnounceSession(handler:handler, provider:provider).run(queue:queue)
        case "/discovery.Discovery/GetAll":
          try Discovery_DiscoveryGetAllSession(handler:handler, provider:provider).run(queue:queue)
        case "/discovery.Discovery/Get":
          try Discovery_DiscoveryGetSession(handler:handler, provider:provider).run(queue:queue)
        case "/discovery.Discovery/AddMetadata":
          try Discovery_DiscoveryAddMetadataSession(handler:handler, provider:provider).run(queue:queue)
        case "/discovery.Discovery/DeleteMetadata":
          try Discovery_DiscoveryDeleteMetadataSession(handler:handler, provider:provider).run(queue:queue)
        case "/discovery.Discovery/GetByAppID":
          try Discovery_DiscoveryGetByAppIDSession(handler:handler, provider:provider).run(queue:queue)
        case "/discovery.Discovery/GetByGatewayID":
          try Discovery_DiscoveryGetByGatewayIDSession(handler:handler, provider:provider).run(queue:queue)
        case "/discovery.Discovery/GetByAppEUI":
          try Discovery_DiscoveryGetByAppEUISession(handler:handler, provider:provider).run(queue:queue)
        default:
          break // handle unknown requests
        }
      } catch (let error) {
        print("Server error: \(error)")
      }
    }
  }
}

/// Type for errors thrown from generated server code.
internal enum Discovery_DiscoveryManagerServerError : Error {
  case endOfStream
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol Discovery_DiscoveryManagerProvider {
}

/// Common properties available in each service session.
internal class Discovery_DiscoveryManagerSession {
  fileprivate var handler : gRPC.Handler
  internal var requestMetadata : Metadata { return handler.requestMetadata }

  internal var statusCode : Int = 0
  internal var statusMessage : String = "OK"
  internal var initialMetadata : Metadata = Metadata()
  internal var trailingMetadata : Metadata = Metadata()

  fileprivate init(handler:gRPC.Handler) {
    self.handler = handler
  }
}


/// Main server for generated service
internal class Discovery_DiscoveryManagerServer {
  private var address: String
  private var server: gRPC.Server
  private var provider: Discovery_DiscoveryManagerProvider?

  /// Create a server that accepts insecure connections.
  internal init(address:String,
              provider:Discovery_DiscoveryManagerProvider) {
    gRPC.initialize()
    self.address = address
    self.provider = provider
    self.server = gRPC.Server(address:address)
  }

  /// Create a server that accepts secure connections.
  internal init?(address:String,
               certificateURL:URL,
               keyURL:URL,
               provider:Discovery_DiscoveryManagerProvider) {
    gRPC.initialize()
    self.address = address
    self.provider = provider
    guard
      let certificate = try? String(contentsOf: certificateURL, encoding: .utf8),
      let key = try? String(contentsOf: keyURL, encoding: .utf8)
      else {
        return nil
    }
    self.server = gRPC.Server(address:address, key:key, certs:certificate)
  }

  /// Start the server.
  internal func start(queue:DispatchQueue = DispatchQueue.global()) {
    guard let provider = self.provider else {
      assert(false) // the server requires a provider
    }
    server.run {(handler) in
      print("Server received request to " + handler.host
        + " calling " + handler.method
        + " from " + handler.caller
        + " with " + String(describing:handler.requestMetadata) )

      do {
        switch handler.method {
        default:
          break // handle unknown requests
        }
      } catch (let error) {
        print("Server error: \(error)")
      }
    }
  }
}
