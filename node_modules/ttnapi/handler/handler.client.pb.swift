/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: github.com/TheThingsNetwork/api/handler/handler.proto
 *
 */

/*
 * Copyright 2017, gRPC Authors All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import Foundation
import Dispatch
import gRPC

/// Type for errors thrown from generated client code.
internal enum Handler_HandlerClientError : Error {
  case endOfStream
  case invalidMessageReceived
  case error(c: CallResult)
}

/// ActivationChallenge (Unary)
internal class Handler_HandlerActivationChallengeCall {
  private var call : Call

  /// Create a call.
  fileprivate init(_ channel: Channel) {
    self.call = channel.makeCall("/handler.Handler/ActivationChallenge")
  }

  /// Run the call. Blocks until the reply is received.
  fileprivate func run(request: Broker_ActivationChallengeRequest,
                       metadata: Metadata) throws -> Broker_ActivationChallengeResponse {
    let sem = DispatchSemaphore(value: 0)
    var returnCallResult : CallResult!
    var returnResponse : Broker_ActivationChallengeResponse?
    _ = try start(request:request, metadata:metadata) {response, callResult in
      returnResponse = response
      returnCallResult = callResult
      sem.signal()
    }
    _ = sem.wait(timeout: DispatchTime.distantFuture)
    if let returnResponse = returnResponse {
      return returnResponse
    } else {
      throw Handler_HandlerClientError.error(c: returnCallResult)
    }
  }

  /// Start the call. Nonblocking.
  fileprivate func start(request: Broker_ActivationChallengeRequest,
                         metadata: Metadata,
                         completion: @escaping (Broker_ActivationChallengeResponse?, CallResult)->())
    throws -> Handler_HandlerActivationChallengeCall {

      let requestData = try request.serializedData()
      try call.start(.unary,
                     metadata:metadata,
                     message:requestData)
      {(callResult) in
        if let responseData = callResult.resultData,
          let response = try? Broker_ActivationChallengeResponse(serializedData:responseData) {
          completion(response, callResult)
        } else {
          completion(nil, callResult)
        }
      }
      return self
  }
}

/// Activate (Unary)
internal class Handler_HandlerActivateCall {
  private var call : Call

  /// Create a call.
  fileprivate init(_ channel: Channel) {
    self.call = channel.makeCall("/handler.Handler/Activate")
  }

  /// Run the call. Blocks until the reply is received.
  fileprivate func run(request: Broker_DeduplicatedDeviceActivationRequest,
                       metadata: Metadata) throws -> Handler_DeviceActivationResponse {
    let sem = DispatchSemaphore(value: 0)
    var returnCallResult : CallResult!
    var returnResponse : Handler_DeviceActivationResponse?
    _ = try start(request:request, metadata:metadata) {response, callResult in
      returnResponse = response
      returnCallResult = callResult
      sem.signal()
    }
    _ = sem.wait(timeout: DispatchTime.distantFuture)
    if let returnResponse = returnResponse {
      return returnResponse
    } else {
      throw Handler_HandlerClientError.error(c: returnCallResult)
    }
  }

  /// Start the call. Nonblocking.
  fileprivate func start(request: Broker_DeduplicatedDeviceActivationRequest,
                         metadata: Metadata,
                         completion: @escaping (Handler_DeviceActivationResponse?, CallResult)->())
    throws -> Handler_HandlerActivateCall {

      let requestData = try request.serializedData()
      try call.start(.unary,
                     metadata:metadata,
                     message:requestData)
      {(callResult) in
        if let responseData = callResult.resultData,
          let response = try? Handler_DeviceActivationResponse(serializedData:responseData) {
          completion(response, callResult)
        } else {
          completion(nil, callResult)
        }
      }
      return self
  }
}

/// Call methods of this class to make API calls.
internal class Handler_HandlerService {
  private var channel: Channel

  /// This metadata will be sent with all requests.
  internal var metadata : Metadata

  /// This property allows the service host name to be overridden.
  /// For example, it can be used to make calls to "localhost:8080"
  /// appear to be to "example.com".
  internal var host : String {
    get {
      return self.channel.host
    }
    set {
      self.channel.host = newValue
    }
  }

  /// Create a client that makes insecure connections.
  internal init(address: String) {
    gRPC.initialize()
    channel = Channel(address:address)
    metadata = Metadata()
  }

  /// Create a client that makes secure connections.
  internal init(address: String, certificates: String?, host: String?) {
    gRPC.initialize()
    channel = Channel(address:address, certificates:certificates, host:host)
    metadata = Metadata()
  }

  /// Synchronous. Unary.
  internal func activationchallenge(_ request: Broker_ActivationChallengeRequest)
    throws
    -> Broker_ActivationChallengeResponse {
      return try Handler_HandlerActivationChallengeCall(channel).run(request:request, metadata:metadata)
  }
  /// Asynchronous. Unary.
  internal func activationchallenge(_ request: Broker_ActivationChallengeRequest,
                  completion: @escaping (Broker_ActivationChallengeResponse?, CallResult)->())
    throws
    -> Handler_HandlerActivationChallengeCall {
      return try Handler_HandlerActivationChallengeCall(channel).start(request:request,
                                                 metadata:metadata,
                                                 completion:completion)
  }
  /// Synchronous. Unary.
  internal func activate(_ request: Broker_DeduplicatedDeviceActivationRequest)
    throws
    -> Handler_DeviceActivationResponse {
      return try Handler_HandlerActivateCall(channel).run(request:request, metadata:metadata)
  }
  /// Asynchronous. Unary.
  internal func activate(_ request: Broker_DeduplicatedDeviceActivationRequest,
                  completion: @escaping (Handler_DeviceActivationResponse?, CallResult)->())
    throws
    -> Handler_HandlerActivateCall {
      return try Handler_HandlerActivateCall(channel).start(request:request,
                                                 metadata:metadata,
                                                 completion:completion)
  }
}

/// Type for errors thrown from generated client code.
internal enum Handler_ApplicationManagerClientError : Error {
  case endOfStream
  case invalidMessageReceived
  case error(c: CallResult)
}

/// RegisterApplication (Unary)
internal class Handler_ApplicationManagerRegisterApplicationCall {
  private var call : Call

  /// Create a call.
  fileprivate init(_ channel: Channel) {
    self.call = channel.makeCall("/handler.ApplicationManager/RegisterApplication")
  }

  /// Run the call. Blocks until the reply is received.
  fileprivate func run(request: Handler_ApplicationIdentifier,
                       metadata: Metadata) throws -> Google_Protobuf_Empty {
    let sem = DispatchSemaphore(value: 0)
    var returnCallResult : CallResult!
    var returnResponse : Google_Protobuf_Empty?
    _ = try start(request:request, metadata:metadata) {response, callResult in
      returnResponse = response
      returnCallResult = callResult
      sem.signal()
    }
    _ = sem.wait(timeout: DispatchTime.distantFuture)
    if let returnResponse = returnResponse {
      return returnResponse
    } else {
      throw Handler_ApplicationManagerClientError.error(c: returnCallResult)
    }
  }

  /// Start the call. Nonblocking.
  fileprivate func start(request: Handler_ApplicationIdentifier,
                         metadata: Metadata,
                         completion: @escaping (Google_Protobuf_Empty?, CallResult)->())
    throws -> Handler_ApplicationManagerRegisterApplicationCall {

      let requestData = try request.serializedData()
      try call.start(.unary,
                     metadata:metadata,
                     message:requestData)
      {(callResult) in
        if let responseData = callResult.resultData,
          let response = try? Google_Protobuf_Empty(serializedData:responseData) {
          completion(response, callResult)
        } else {
          completion(nil, callResult)
        }
      }
      return self
  }
}

/// GetApplication (Unary)
internal class Handler_ApplicationManagerGetApplicationCall {
  private var call : Call

  /// Create a call.
  fileprivate init(_ channel: Channel) {
    self.call = channel.makeCall("/handler.ApplicationManager/GetApplication")
  }

  /// Run the call. Blocks until the reply is received.
  fileprivate func run(request: Handler_ApplicationIdentifier,
                       metadata: Metadata) throws -> Handler_Application {
    let sem = DispatchSemaphore(value: 0)
    var returnCallResult : CallResult!
    var returnResponse : Handler_Application?
    _ = try start(request:request, metadata:metadata) {response, callResult in
      returnResponse = response
      returnCallResult = callResult
      sem.signal()
    }
    _ = sem.wait(timeout: DispatchTime.distantFuture)
    if let returnResponse = returnResponse {
      return returnResponse
    } else {
      throw Handler_ApplicationManagerClientError.error(c: returnCallResult)
    }
  }

  /// Start the call. Nonblocking.
  fileprivate func start(request: Handler_ApplicationIdentifier,
                         metadata: Metadata,
                         completion: @escaping (Handler_Application?, CallResult)->())
    throws -> Handler_ApplicationManagerGetApplicationCall {

      let requestData = try request.serializedData()
      try call.start(.unary,
                     metadata:metadata,
                     message:requestData)
      {(callResult) in
        if let responseData = callResult.resultData,
          let response = try? Handler_Application(serializedData:responseData) {
          completion(response, callResult)
        } else {
          completion(nil, callResult)
        }
      }
      return self
  }
}

/// SetApplication (Unary)
internal class Handler_ApplicationManagerSetApplicationCall {
  private var call : Call

  /// Create a call.
  fileprivate init(_ channel: Channel) {
    self.call = channel.makeCall("/handler.ApplicationManager/SetApplication")
  }

  /// Run the call. Blocks until the reply is received.
  fileprivate func run(request: Handler_Application,
                       metadata: Metadata) throws -> Google_Protobuf_Empty {
    let sem = DispatchSemaphore(value: 0)
    var returnCallResult : CallResult!
    var returnResponse : Google_Protobuf_Empty?
    _ = try start(request:request, metadata:metadata) {response, callResult in
      returnResponse = response
      returnCallResult = callResult
      sem.signal()
    }
    _ = sem.wait(timeout: DispatchTime.distantFuture)
    if let returnResponse = returnResponse {
      return returnResponse
    } else {
      throw Handler_ApplicationManagerClientError.error(c: returnCallResult)
    }
  }

  /// Start the call. Nonblocking.
  fileprivate func start(request: Handler_Application,
                         metadata: Metadata,
                         completion: @escaping (Google_Protobuf_Empty?, CallResult)->())
    throws -> Handler_ApplicationManagerSetApplicationCall {

      let requestData = try request.serializedData()
      try call.start(.unary,
                     metadata:metadata,
                     message:requestData)
      {(callResult) in
        if let responseData = callResult.resultData,
          let response = try? Google_Protobuf_Empty(serializedData:responseData) {
          completion(response, callResult)
        } else {
          completion(nil, callResult)
        }
      }
      return self
  }
}

/// DeleteApplication (Unary)
internal class Handler_ApplicationManagerDeleteApplicationCall {
  private var call : Call

  /// Create a call.
  fileprivate init(_ channel: Channel) {
    self.call = channel.makeCall("/handler.ApplicationManager/DeleteApplication")
  }

  /// Run the call. Blocks until the reply is received.
  fileprivate func run(request: Handler_ApplicationIdentifier,
                       metadata: Metadata) throws -> Google_Protobuf_Empty {
    let sem = DispatchSemaphore(value: 0)
    var returnCallResult : CallResult!
    var returnResponse : Google_Protobuf_Empty?
    _ = try start(request:request, metadata:metadata) {response, callResult in
      returnResponse = response
      returnCallResult = callResult
      sem.signal()
    }
    _ = sem.wait(timeout: DispatchTime.distantFuture)
    if let returnResponse = returnResponse {
      return returnResponse
    } else {
      throw Handler_ApplicationManagerClientError.error(c: returnCallResult)
    }
  }

  /// Start the call. Nonblocking.
  fileprivate func start(request: Handler_ApplicationIdentifier,
                         metadata: Metadata,
                         completion: @escaping (Google_Protobuf_Empty?, CallResult)->())
    throws -> Handler_ApplicationManagerDeleteApplicationCall {

      let requestData = try request.serializedData()
      try call.start(.unary,
                     metadata:metadata,
                     message:requestData)
      {(callResult) in
        if let responseData = callResult.resultData,
          let response = try? Google_Protobuf_Empty(serializedData:responseData) {
          completion(response, callResult)
        } else {
          completion(nil, callResult)
        }
      }
      return self
  }
}

/// GetDevice (Unary)
internal class Handler_ApplicationManagerGetDeviceCall {
  private var call : Call

  /// Create a call.
  fileprivate init(_ channel: Channel) {
    self.call = channel.makeCall("/handler.ApplicationManager/GetDevice")
  }

  /// Run the call. Blocks until the reply is received.
  fileprivate func run(request: Handler_DeviceIdentifier,
                       metadata: Metadata) throws -> Handler_Device {
    let sem = DispatchSemaphore(value: 0)
    var returnCallResult : CallResult!
    var returnResponse : Handler_Device?
    _ = try start(request:request, metadata:metadata) {response, callResult in
      returnResponse = response
      returnCallResult = callResult
      sem.signal()
    }
    _ = sem.wait(timeout: DispatchTime.distantFuture)
    if let returnResponse = returnResponse {
      return returnResponse
    } else {
      throw Handler_ApplicationManagerClientError.error(c: returnCallResult)
    }
  }

  /// Start the call. Nonblocking.
  fileprivate func start(request: Handler_DeviceIdentifier,
                         metadata: Metadata,
                         completion: @escaping (Handler_Device?, CallResult)->())
    throws -> Handler_ApplicationManagerGetDeviceCall {

      let requestData = try request.serializedData()
      try call.start(.unary,
                     metadata:metadata,
                     message:requestData)
      {(callResult) in
        if let responseData = callResult.resultData,
          let response = try? Handler_Device(serializedData:responseData) {
          completion(response, callResult)
        } else {
          completion(nil, callResult)
        }
      }
      return self
  }
}

/// SetDevice (Unary)
internal class Handler_ApplicationManagerSetDeviceCall {
  private var call : Call

  /// Create a call.
  fileprivate init(_ channel: Channel) {
    self.call = channel.makeCall("/handler.ApplicationManager/SetDevice")
  }

  /// Run the call. Blocks until the reply is received.
  fileprivate func run(request: Handler_Device,
                       metadata: Metadata) throws -> Google_Protobuf_Empty {
    let sem = DispatchSemaphore(value: 0)
    var returnCallResult : CallResult!
    var returnResponse : Google_Protobuf_Empty?
    _ = try start(request:request, metadata:metadata) {response, callResult in
      returnResponse = response
      returnCallResult = callResult
      sem.signal()
    }
    _ = sem.wait(timeout: DispatchTime.distantFuture)
    if let returnResponse = returnResponse {
      return returnResponse
    } else {
      throw Handler_ApplicationManagerClientError.error(c: returnCallResult)
    }
  }

  /// Start the call. Nonblocking.
  fileprivate func start(request: Handler_Device,
                         metadata: Metadata,
                         completion: @escaping (Google_Protobuf_Empty?, CallResult)->())
    throws -> Handler_ApplicationManagerSetDeviceCall {

      let requestData = try request.serializedData()
      try call.start(.unary,
                     metadata:metadata,
                     message:requestData)
      {(callResult) in
        if let responseData = callResult.resultData,
          let response = try? Google_Protobuf_Empty(serializedData:responseData) {
          completion(response, callResult)
        } else {
          completion(nil, callResult)
        }
      }
      return self
  }
}

/// DeleteDevice (Unary)
internal class Handler_ApplicationManagerDeleteDeviceCall {
  private var call : Call

  /// Create a call.
  fileprivate init(_ channel: Channel) {
    self.call = channel.makeCall("/handler.ApplicationManager/DeleteDevice")
  }

  /// Run the call. Blocks until the reply is received.
  fileprivate func run(request: Handler_DeviceIdentifier,
                       metadata: Metadata) throws -> Google_Protobuf_Empty {
    let sem = DispatchSemaphore(value: 0)
    var returnCallResult : CallResult!
    var returnResponse : Google_Protobuf_Empty?
    _ = try start(request:request, metadata:metadata) {response, callResult in
      returnResponse = response
      returnCallResult = callResult
      sem.signal()
    }
    _ = sem.wait(timeout: DispatchTime.distantFuture)
    if let returnResponse = returnResponse {
      return returnResponse
    } else {
      throw Handler_ApplicationManagerClientError.error(c: returnCallResult)
    }
  }

  /// Start the call. Nonblocking.
  fileprivate func start(request: Handler_DeviceIdentifier,
                         metadata: Metadata,
                         completion: @escaping (Google_Protobuf_Empty?, CallResult)->())
    throws -> Handler_ApplicationManagerDeleteDeviceCall {

      let requestData = try request.serializedData()
      try call.start(.unary,
                     metadata:metadata,
                     message:requestData)
      {(callResult) in
        if let responseData = callResult.resultData,
          let response = try? Google_Protobuf_Empty(serializedData:responseData) {
          completion(response, callResult)
        } else {
          completion(nil, callResult)
        }
      }
      return self
  }
}

/// GetDevicesForApplication (Unary)
internal class Handler_ApplicationManagerGetDevicesForApplicationCall {
  private var call : Call

  /// Create a call.
  fileprivate init(_ channel: Channel) {
    self.call = channel.makeCall("/handler.ApplicationManager/GetDevicesForApplication")
  }

  /// Run the call. Blocks until the reply is received.
  fileprivate func run(request: Handler_ApplicationIdentifier,
                       metadata: Metadata) throws -> Handler_DeviceList {
    let sem = DispatchSemaphore(value: 0)
    var returnCallResult : CallResult!
    var returnResponse : Handler_DeviceList?
    _ = try start(request:request, metadata:metadata) {response, callResult in
      returnResponse = response
      returnCallResult = callResult
      sem.signal()
    }
    _ = sem.wait(timeout: DispatchTime.distantFuture)
    if let returnResponse = returnResponse {
      return returnResponse
    } else {
      throw Handler_ApplicationManagerClientError.error(c: returnCallResult)
    }
  }

  /// Start the call. Nonblocking.
  fileprivate func start(request: Handler_ApplicationIdentifier,
                         metadata: Metadata,
                         completion: @escaping (Handler_DeviceList?, CallResult)->())
    throws -> Handler_ApplicationManagerGetDevicesForApplicationCall {

      let requestData = try request.serializedData()
      try call.start(.unary,
                     metadata:metadata,
                     message:requestData)
      {(callResult) in
        if let responseData = callResult.resultData,
          let response = try? Handler_DeviceList(serializedData:responseData) {
          completion(response, callResult)
        } else {
          completion(nil, callResult)
        }
      }
      return self
  }
}

/// DryDownlink (Unary)
internal class Handler_ApplicationManagerDryDownlinkCall {
  private var call : Call

  /// Create a call.
  fileprivate init(_ channel: Channel) {
    self.call = channel.makeCall("/handler.ApplicationManager/DryDownlink")
  }

  /// Run the call. Blocks until the reply is received.
  fileprivate func run(request: Handler_DryDownlinkMessage,
                       metadata: Metadata) throws -> Handler_DryDownlinkResult {
    let sem = DispatchSemaphore(value: 0)
    var returnCallResult : CallResult!
    var returnResponse : Handler_DryDownlinkResult?
    _ = try start(request:request, metadata:metadata) {response, callResult in
      returnResponse = response
      returnCallResult = callResult
      sem.signal()
    }
    _ = sem.wait(timeout: DispatchTime.distantFuture)
    if let returnResponse = returnResponse {
      return returnResponse
    } else {
      throw Handler_ApplicationManagerClientError.error(c: returnCallResult)
    }
  }

  /// Start the call. Nonblocking.
  fileprivate func start(request: Handler_DryDownlinkMessage,
                         metadata: Metadata,
                         completion: @escaping (Handler_DryDownlinkResult?, CallResult)->())
    throws -> Handler_ApplicationManagerDryDownlinkCall {

      let requestData = try request.serializedData()
      try call.start(.unary,
                     metadata:metadata,
                     message:requestData)
      {(callResult) in
        if let responseData = callResult.resultData,
          let response = try? Handler_DryDownlinkResult(serializedData:responseData) {
          completion(response, callResult)
        } else {
          completion(nil, callResult)
        }
      }
      return self
  }
}

/// DryUplink (Unary)
internal class Handler_ApplicationManagerDryUplinkCall {
  private var call : Call

  /// Create a call.
  fileprivate init(_ channel: Channel) {
    self.call = channel.makeCall("/handler.ApplicationManager/DryUplink")
  }

  /// Run the call. Blocks until the reply is received.
  fileprivate func run(request: Handler_DryUplinkMessage,
                       metadata: Metadata) throws -> Handler_DryUplinkResult {
    let sem = DispatchSemaphore(value: 0)
    var returnCallResult : CallResult!
    var returnResponse : Handler_DryUplinkResult?
    _ = try start(request:request, metadata:metadata) {response, callResult in
      returnResponse = response
      returnCallResult = callResult
      sem.signal()
    }
    _ = sem.wait(timeout: DispatchTime.distantFuture)
    if let returnResponse = returnResponse {
      return returnResponse
    } else {
      throw Handler_ApplicationManagerClientError.error(c: returnCallResult)
    }
  }

  /// Start the call. Nonblocking.
  fileprivate func start(request: Handler_DryUplinkMessage,
                         metadata: Metadata,
                         completion: @escaping (Handler_DryUplinkResult?, CallResult)->())
    throws -> Handler_ApplicationManagerDryUplinkCall {

      let requestData = try request.serializedData()
      try call.start(.unary,
                     metadata:metadata,
                     message:requestData)
      {(callResult) in
        if let responseData = callResult.resultData,
          let response = try? Handler_DryUplinkResult(serializedData:responseData) {
          completion(response, callResult)
        } else {
          completion(nil, callResult)
        }
      }
      return self
  }
}

/// SimulateUplink (Unary)
internal class Handler_ApplicationManagerSimulateUplinkCall {
  private var call : Call

  /// Create a call.
  fileprivate init(_ channel: Channel) {
    self.call = channel.makeCall("/handler.ApplicationManager/SimulateUplink")
  }

  /// Run the call. Blocks until the reply is received.
  fileprivate func run(request: Handler_SimulatedUplinkMessage,
                       metadata: Metadata) throws -> Google_Protobuf_Empty {
    let sem = DispatchSemaphore(value: 0)
    var returnCallResult : CallResult!
    var returnResponse : Google_Protobuf_Empty?
    _ = try start(request:request, metadata:metadata) {response, callResult in
      returnResponse = response
      returnCallResult = callResult
      sem.signal()
    }
    _ = sem.wait(timeout: DispatchTime.distantFuture)
    if let returnResponse = returnResponse {
      return returnResponse
    } else {
      throw Handler_ApplicationManagerClientError.error(c: returnCallResult)
    }
  }

  /// Start the call. Nonblocking.
  fileprivate func start(request: Handler_SimulatedUplinkMessage,
                         metadata: Metadata,
                         completion: @escaping (Google_Protobuf_Empty?, CallResult)->())
    throws -> Handler_ApplicationManagerSimulateUplinkCall {

      let requestData = try request.serializedData()
      try call.start(.unary,
                     metadata:metadata,
                     message:requestData)
      {(callResult) in
        if let responseData = callResult.resultData,
          let response = try? Google_Protobuf_Empty(serializedData:responseData) {
          completion(response, callResult)
        } else {
          completion(nil, callResult)
        }
      }
      return self
  }
}

/// Call methods of this class to make API calls.
internal class Handler_ApplicationManagerService {
  private var channel: Channel

  /// This metadata will be sent with all requests.
  internal var metadata : Metadata

  /// This property allows the service host name to be overridden.
  /// For example, it can be used to make calls to "localhost:8080"
  /// appear to be to "example.com".
  internal var host : String {
    get {
      return self.channel.host
    }
    set {
      self.channel.host = newValue
    }
  }

  /// Create a client that makes insecure connections.
  internal init(address: String) {
    gRPC.initialize()
    channel = Channel(address:address)
    metadata = Metadata()
  }

  /// Create a client that makes secure connections.
  internal init(address: String, certificates: String?, host: String?) {
    gRPC.initialize()
    channel = Channel(address:address, certificates:certificates, host:host)
    metadata = Metadata()
  }

  /// Synchronous. Unary.
  internal func registerapplication(_ request: Handler_ApplicationIdentifier)
    throws
    -> Google_Protobuf_Empty {
      return try Handler_ApplicationManagerRegisterApplicationCall(channel).run(request:request, metadata:metadata)
  }
  /// Asynchronous. Unary.
  internal func registerapplication(_ request: Handler_ApplicationIdentifier,
                  completion: @escaping (Google_Protobuf_Empty?, CallResult)->())
    throws
    -> Handler_ApplicationManagerRegisterApplicationCall {
      return try Handler_ApplicationManagerRegisterApplicationCall(channel).start(request:request,
                                                 metadata:metadata,
                                                 completion:completion)
  }
  /// Synchronous. Unary.
  internal func getapplication(_ request: Handler_ApplicationIdentifier)
    throws
    -> Handler_Application {
      return try Handler_ApplicationManagerGetApplicationCall(channel).run(request:request, metadata:metadata)
  }
  /// Asynchronous. Unary.
  internal func getapplication(_ request: Handler_ApplicationIdentifier,
                  completion: @escaping (Handler_Application?, CallResult)->())
    throws
    -> Handler_ApplicationManagerGetApplicationCall {
      return try Handler_ApplicationManagerGetApplicationCall(channel).start(request:request,
                                                 metadata:metadata,
                                                 completion:completion)
  }
  /// Synchronous. Unary.
  internal func setapplication(_ request: Handler_Application)
    throws
    -> Google_Protobuf_Empty {
      return try Handler_ApplicationManagerSetApplicationCall(channel).run(request:request, metadata:metadata)
  }
  /// Asynchronous. Unary.
  internal func setapplication(_ request: Handler_Application,
                  completion: @escaping (Google_Protobuf_Empty?, CallResult)->())
    throws
    -> Handler_ApplicationManagerSetApplicationCall {
      return try Handler_ApplicationManagerSetApplicationCall(channel).start(request:request,
                                                 metadata:metadata,
                                                 completion:completion)
  }
  /// Synchronous. Unary.
  internal func deleteapplication(_ request: Handler_ApplicationIdentifier)
    throws
    -> Google_Protobuf_Empty {
      return try Handler_ApplicationManagerDeleteApplicationCall(channel).run(request:request, metadata:metadata)
  }
  /// Asynchronous. Unary.
  internal func deleteapplication(_ request: Handler_ApplicationIdentifier,
                  completion: @escaping (Google_Protobuf_Empty?, CallResult)->())
    throws
    -> Handler_ApplicationManagerDeleteApplicationCall {
      return try Handler_ApplicationManagerDeleteApplicationCall(channel).start(request:request,
                                                 metadata:metadata,
                                                 completion:completion)
  }
  /// Synchronous. Unary.
  internal func getdevice(_ request: Handler_DeviceIdentifier)
    throws
    -> Handler_Device {
      return try Handler_ApplicationManagerGetDeviceCall(channel).run(request:request, metadata:metadata)
  }
  /// Asynchronous. Unary.
  internal func getdevice(_ request: Handler_DeviceIdentifier,
                  completion: @escaping (Handler_Device?, CallResult)->())
    throws
    -> Handler_ApplicationManagerGetDeviceCall {
      return try Handler_ApplicationManagerGetDeviceCall(channel).start(request:request,
                                                 metadata:metadata,
                                                 completion:completion)
  }
  /// Synchronous. Unary.
  internal func setdevice(_ request: Handler_Device)
    throws
    -> Google_Protobuf_Empty {
      return try Handler_ApplicationManagerSetDeviceCall(channel).run(request:request, metadata:metadata)
  }
  /// Asynchronous. Unary.
  internal func setdevice(_ request: Handler_Device,
                  completion: @escaping (Google_Protobuf_Empty?, CallResult)->())
    throws
    -> Handler_ApplicationManagerSetDeviceCall {
      return try Handler_ApplicationManagerSetDeviceCall(channel).start(request:request,
                                                 metadata:metadata,
                                                 completion:completion)
  }
  /// Synchronous. Unary.
  internal func deletedevice(_ request: Handler_DeviceIdentifier)
    throws
    -> Google_Protobuf_Empty {
      return try Handler_ApplicationManagerDeleteDeviceCall(channel).run(request:request, metadata:metadata)
  }
  /// Asynchronous. Unary.
  internal func deletedevice(_ request: Handler_DeviceIdentifier,
                  completion: @escaping (Google_Protobuf_Empty?, CallResult)->())
    throws
    -> Handler_ApplicationManagerDeleteDeviceCall {
      return try Handler_ApplicationManagerDeleteDeviceCall(channel).start(request:request,
                                                 metadata:metadata,
                                                 completion:completion)
  }
  /// Synchronous. Unary.
  internal func getdevicesforapplication(_ request: Handler_ApplicationIdentifier)
    throws
    -> Handler_DeviceList {
      return try Handler_ApplicationManagerGetDevicesForApplicationCall(channel).run(request:request, metadata:metadata)
  }
  /// Asynchronous. Unary.
  internal func getdevicesforapplication(_ request: Handler_ApplicationIdentifier,
                  completion: @escaping (Handler_DeviceList?, CallResult)->())
    throws
    -> Handler_ApplicationManagerGetDevicesForApplicationCall {
      return try Handler_ApplicationManagerGetDevicesForApplicationCall(channel).start(request:request,
                                                 metadata:metadata,
                                                 completion:completion)
  }
  /// Synchronous. Unary.
  internal func drydownlink(_ request: Handler_DryDownlinkMessage)
    throws
    -> Handler_DryDownlinkResult {
      return try Handler_ApplicationManagerDryDownlinkCall(channel).run(request:request, metadata:metadata)
  }
  /// Asynchronous. Unary.
  internal func drydownlink(_ request: Handler_DryDownlinkMessage,
                  completion: @escaping (Handler_DryDownlinkResult?, CallResult)->())
    throws
    -> Handler_ApplicationManagerDryDownlinkCall {
      return try Handler_ApplicationManagerDryDownlinkCall(channel).start(request:request,
                                                 metadata:metadata,
                                                 completion:completion)
  }
  /// Synchronous. Unary.
  internal func dryuplink(_ request: Handler_DryUplinkMessage)
    throws
    -> Handler_DryUplinkResult {
      return try Handler_ApplicationManagerDryUplinkCall(channel).run(request:request, metadata:metadata)
  }
  /// Asynchronous. Unary.
  internal func dryuplink(_ request: Handler_DryUplinkMessage,
                  completion: @escaping (Handler_DryUplinkResult?, CallResult)->())
    throws
    -> Handler_ApplicationManagerDryUplinkCall {
      return try Handler_ApplicationManagerDryUplinkCall(channel).start(request:request,
                                                 metadata:metadata,
                                                 completion:completion)
  }
  /// Synchronous. Unary.
  internal func simulateuplink(_ request: Handler_SimulatedUplinkMessage)
    throws
    -> Google_Protobuf_Empty {
      return try Handler_ApplicationManagerSimulateUplinkCall(channel).run(request:request, metadata:metadata)
  }
  /// Asynchronous. Unary.
  internal func simulateuplink(_ request: Handler_SimulatedUplinkMessage,
                  completion: @escaping (Google_Protobuf_Empty?, CallResult)->())
    throws
    -> Handler_ApplicationManagerSimulateUplinkCall {
      return try Handler_ApplicationManagerSimulateUplinkCall(channel).start(request:request,
                                                 metadata:metadata,
                                                 completion:completion)
  }
}

/// Type for errors thrown from generated client code.
internal enum Handler_HandlerManagerClientError : Error {
  case endOfStream
  case invalidMessageReceived
  case error(c: CallResult)
}

/// GetStatus (Unary)
internal class Handler_HandlerManagerGetStatusCall {
  private var call : Call

  /// Create a call.
  fileprivate init(_ channel: Channel) {
    self.call = channel.makeCall("/handler.HandlerManager/GetStatus")
  }

  /// Run the call. Blocks until the reply is received.
  fileprivate func run(request: Handler_StatusRequest,
                       metadata: Metadata) throws -> Handler_Status {
    let sem = DispatchSemaphore(value: 0)
    var returnCallResult : CallResult!
    var returnResponse : Handler_Status?
    _ = try start(request:request, metadata:metadata) {response, callResult in
      returnResponse = response
      returnCallResult = callResult
      sem.signal()
    }
    _ = sem.wait(timeout: DispatchTime.distantFuture)
    if let returnResponse = returnResponse {
      return returnResponse
    } else {
      throw Handler_HandlerManagerClientError.error(c: returnCallResult)
    }
  }

  /// Start the call. Nonblocking.
  fileprivate func start(request: Handler_StatusRequest,
                         metadata: Metadata,
                         completion: @escaping (Handler_Status?, CallResult)->())
    throws -> Handler_HandlerManagerGetStatusCall {

      let requestData = try request.serializedData()
      try call.start(.unary,
                     metadata:metadata,
                     message:requestData)
      {(callResult) in
        if let responseData = callResult.resultData,
          let response = try? Handler_Status(serializedData:responseData) {
          completion(response, callResult)
        } else {
          completion(nil, callResult)
        }
      }
      return self
  }
}

/// Call methods of this class to make API calls.
internal class Handler_HandlerManagerService {
  private var channel: Channel

  /// This metadata will be sent with all requests.
  internal var metadata : Metadata

  /// This property allows the service host name to be overridden.
  /// For example, it can be used to make calls to "localhost:8080"
  /// appear to be to "example.com".
  internal var host : String {
    get {
      return self.channel.host
    }
    set {
      self.channel.host = newValue
    }
  }

  /// Create a client that makes insecure connections.
  internal init(address: String) {
    gRPC.initialize()
    channel = Channel(address:address)
    metadata = Metadata()
  }

  /// Create a client that makes secure connections.
  internal init(address: String, certificates: String?, host: String?) {
    gRPC.initialize()
    channel = Channel(address:address, certificates:certificates, host:host)
    metadata = Metadata()
  }

  /// Synchronous. Unary.
  internal func getstatus(_ request: Handler_StatusRequest)
    throws
    -> Handler_Status {
      return try Handler_HandlerManagerGetStatusCall(channel).run(request:request, metadata:metadata)
  }
  /// Asynchronous. Unary.
  internal func getstatus(_ request: Handler_StatusRequest,
                  completion: @escaping (Handler_Status?, CallResult)->())
    throws
    -> Handler_HandlerManagerGetStatusCall {
      return try Handler_HandlerManagerGetStatusCall(channel).start(request:request,
                                                 metadata:metadata,
                                                 completion:completion)
  }
}
