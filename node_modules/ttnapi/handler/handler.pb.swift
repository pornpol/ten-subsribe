// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: github.com/TheThingsNetwork/api/handler/handler.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

// Copyright Â© 2017 The Things Network
// Use of this source code is governed by the MIT license that can be found in the LICENSE file.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Handler_DeviceActivationResponse: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".DeviceActivationResponse"

  var payload: Data {
    get {return _storage._payload}
    set {_uniqueStorage()._payload = newValue}
  }

  var message: Protocol_Message {
    get {return _storage._message ?? Protocol_Message()}
    set {_uniqueStorage()._message = newValue}
  }
  /// Returns true if `message` has been explicitly set.
  var hasMessage: Bool {return _storage._message != nil}
  /// Clears the value of `message`. Subsequent reads from it will return its default value.
  mutating func clearMessage() {_storage._message = nil}

  var downlinkOption: Broker_DownlinkOption {
    get {return _storage._downlinkOption ?? Broker_DownlinkOption()}
    set {_uniqueStorage()._downlinkOption = newValue}
  }
  /// Returns true if `downlinkOption` has been explicitly set.
  var hasDownlinkOption: Bool {return _storage._downlinkOption != nil}
  /// Clears the value of `downlinkOption`. Subsequent reads from it will return its default value.
  mutating func clearDownlinkOption() {_storage._downlinkOption = nil}

  var activationMetadata: Protocol_ActivationMetadata {
    get {return _storage._activationMetadata ?? Protocol_ActivationMetadata()}
    set {_uniqueStorage()._activationMetadata = newValue}
  }
  /// Returns true if `activationMetadata` has been explicitly set.
  var hasActivationMetadata: Bool {return _storage._activationMetadata != nil}
  /// Clears the value of `activationMetadata`. Subsequent reads from it will return its default value.
  mutating func clearActivationMetadata() {_storage._activationMetadata = nil}

  var trace: Trace_Trace {
    get {return _storage._trace ?? Trace_Trace()}
    set {_uniqueStorage()._trace = newValue}
  }
  /// Returns true if `trace` has been explicitly set.
  var hasTrace: Bool {return _storage._trace != nil}
  /// Clears the value of `trace`. Subsequent reads from it will return its default value.
  mutating func clearTrace() {_storage._trace = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularBytesField(value: &_storage._payload)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._message)
        case 11: try decoder.decodeSingularMessageField(value: &_storage._downlinkOption)
        case 23: try decoder.decodeSingularMessageField(value: &_storage._activationMetadata)
        case 31: try decoder.decodeSingularMessageField(value: &_storage._trace)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._payload.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._payload, fieldNumber: 1)
      }
      if let v = _storage._message {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._downlinkOption {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      }
      if let v = _storage._activationMetadata {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 23)
      }
      if let v = _storage._trace {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 31)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// message StatusRequest is used to request the status of this Handler
struct Handler_StatusRequest: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".StatusRequest"

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// message Status is the response to the StatusRequest
struct Handler_Status: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".Status"

  var system: Api_SystemStats {
    get {return _storage._system ?? Api_SystemStats()}
    set {_uniqueStorage()._system = newValue}
  }
  /// Returns true if `system` has been explicitly set.
  var hasSystem: Bool {return _storage._system != nil}
  /// Clears the value of `system`. Subsequent reads from it will return its default value.
  mutating func clearSystem() {_storage._system = nil}

  var component: Api_ComponentStats {
    get {return _storage._component ?? Api_ComponentStats()}
    set {_uniqueStorage()._component = newValue}
  }
  /// Returns true if `component` has been explicitly set.
  var hasComponent: Bool {return _storage._component != nil}
  /// Clears the value of `component`. Subsequent reads from it will return its default value.
  mutating func clearComponent() {_storage._component = nil}

  var uplink: Api_Rates {
    get {return _storage._uplink ?? Api_Rates()}
    set {_uniqueStorage()._uplink = newValue}
  }
  /// Returns true if `uplink` has been explicitly set.
  var hasUplink: Bool {return _storage._uplink != nil}
  /// Clears the value of `uplink`. Subsequent reads from it will return its default value.
  mutating func clearUplink() {_storage._uplink = nil}

  var downlink: Api_Rates {
    get {return _storage._downlink ?? Api_Rates()}
    set {_uniqueStorage()._downlink = newValue}
  }
  /// Returns true if `downlink` has been explicitly set.
  var hasDownlink: Bool {return _storage._downlink != nil}
  /// Clears the value of `downlink`. Subsequent reads from it will return its default value.
  mutating func clearDownlink() {_storage._downlink = nil}

  var activations: Api_Rates {
    get {return _storage._activations ?? Api_Rates()}
    set {_uniqueStorage()._activations = newValue}
  }
  /// Returns true if `activations` has been explicitly set.
  var hasActivations: Bool {return _storage._activations != nil}
  /// Clears the value of `activations`. Subsequent reads from it will return its default value.
  mutating func clearActivations() {_storage._activations = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._system)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._component)
        case 11: try decoder.decodeSingularMessageField(value: &_storage._uplink)
        case 12: try decoder.decodeSingularMessageField(value: &_storage._downlink)
        case 13: try decoder.decodeSingularMessageField(value: &_storage._activations)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._system {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._component {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._uplink {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      }
      if let v = _storage._downlink {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      }
      if let v = _storage._activations {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Handler_ApplicationIdentifier: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".ApplicationIdentifier"

  var appID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.appID)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.appID.isEmpty {
      try visitor.visitSingularStringField(value: self.appID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// The Application settings
struct Handler_Application: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".Application"

  var appID: String = String()

  /// The payload format indicates how payload is formatted.
  var payloadFormat: String = String()

  /// The decoder is a JavaScript function that decodes a byte array to an object.
  /// This function is used when the payload format is set to custom.
  var decoder: String = String()

  /// The converter is a JavaScript function that can be used to convert values
  /// in the object returned from the decoder. This can for example be useful to
  /// convert a voltage to a temperature. This function is used when the payload format is set to custom.
  var converter: String = String()

  /// The validator is a JavaScript function that checks the validity of the
  /// object returned by the decoder or converter. If validation fails, the
  /// message is dropped. This function is used when the payload format is set to custom.
  var validator: String = String()

  /// The encoder is a JavaScript function that encodes an object to a byte array.
  /// This function is used when the payload format is set to custom.
  var encoder: String = String()

  /// The "register on join" access key should only be set if devices need to be registered on join
  var registerOnJoinAccessKey: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.appID)
      case 2: try decoder.decodeSingularStringField(value: &self.decoder)
      case 3: try decoder.decodeSingularStringField(value: &self.converter)
      case 4: try decoder.decodeSingularStringField(value: &self.validator)
      case 5: try decoder.decodeSingularStringField(value: &self.encoder)
      case 6: try decoder.decodeSingularStringField(value: &self.payloadFormat)
      case 7: try decoder.decodeSingularStringField(value: &self.registerOnJoinAccessKey)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.appID.isEmpty {
      try visitor.visitSingularStringField(value: self.appID, fieldNumber: 1)
    }
    if !self.decoder.isEmpty {
      try visitor.visitSingularStringField(value: self.decoder, fieldNumber: 2)
    }
    if !self.converter.isEmpty {
      try visitor.visitSingularStringField(value: self.converter, fieldNumber: 3)
    }
    if !self.validator.isEmpty {
      try visitor.visitSingularStringField(value: self.validator, fieldNumber: 4)
    }
    if !self.encoder.isEmpty {
      try visitor.visitSingularStringField(value: self.encoder, fieldNumber: 5)
    }
    if !self.payloadFormat.isEmpty {
      try visitor.visitSingularStringField(value: self.payloadFormat, fieldNumber: 6)
    }
    if !self.registerOnJoinAccessKey.isEmpty {
      try visitor.visitSingularStringField(value: self.registerOnJoinAccessKey, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Handler_DeviceIdentifier: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".DeviceIdentifier"

  var appID: String = String()

  var devID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.appID)
      case 2: try decoder.decodeSingularStringField(value: &self.devID)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.appID.isEmpty {
      try visitor.visitSingularStringField(value: self.appID, fieldNumber: 1)
    }
    if !self.devID.isEmpty {
      try visitor.visitSingularStringField(value: self.devID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// The Device settings
struct Handler_Device: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".Device"

  var appID: String {
    get {return _storage._appID}
    set {_uniqueStorage()._appID = newValue}
  }

  var devID: String {
    get {return _storage._devID}
    set {_uniqueStorage()._devID = newValue}
  }

  /// The device can be of different kinds
  var device: OneOf_Device? {
    get {return _storage._device}
    set {_uniqueStorage()._device = newValue}
  }

  var lorawanDevice: Lorawan_Device {
    get {
      if case .lorawanDevice(let v)? = _storage._device {return v}
      return Lorawan_Device()
    }
    set {_uniqueStorage()._device = .lorawanDevice(newValue)}
  }

  var latitude: Float {
    get {return _storage._latitude}
    set {_uniqueStorage()._latitude = newValue}
  }

  var longitude: Float {
    get {return _storage._longitude}
    set {_uniqueStorage()._longitude = newValue}
  }

  var altitude: Int32 {
    get {return _storage._altitude}
    set {_uniqueStorage()._altitude = newValue}
  }

  var attributes: Dictionary<String,String> {
    get {return _storage._attributes}
    set {_uniqueStorage()._attributes = newValue}
  }

  var description_p: String {
    get {return _storage._description_p}
    set {_uniqueStorage()._description_p = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  /// The device can be of different kinds
  enum OneOf_Device: Equatable {
    case lorawanDevice(Lorawan_Device)

    static func ==(lhs: Handler_Device.OneOf_Device, rhs: Handler_Device.OneOf_Device) -> Bool {
      switch (lhs, rhs) {
      case (.lorawanDevice(let l), .lorawanDevice(let r)): return l == r
      }
    }
  }

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._appID)
        case 2: try decoder.decodeSingularStringField(value: &_storage._devID)
        case 3:
          var v: Lorawan_Device?
          if let current = _storage._device {
            try decoder.handleConflictingOneOf()
            if case .lorawanDevice(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._device = .lorawanDevice(v)}
        case 10: try decoder.decodeSingularFloatField(value: &_storage._latitude)
        case 11: try decoder.decodeSingularFloatField(value: &_storage._longitude)
        case 12: try decoder.decodeSingularInt32Field(value: &_storage._altitude)
        case 13: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &_storage._attributes)
        case 20: try decoder.decodeSingularStringField(value: &_storage._description_p)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._appID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._appID, fieldNumber: 1)
      }
      if !_storage._devID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._devID, fieldNumber: 2)
      }
      if case .lorawanDevice(let v)? = _storage._device {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if _storage._latitude != 0 {
        try visitor.visitSingularFloatField(value: _storage._latitude, fieldNumber: 10)
      }
      if _storage._longitude != 0 {
        try visitor.visitSingularFloatField(value: _storage._longitude, fieldNumber: 11)
      }
      if _storage._altitude != 0 {
        try visitor.visitSingularInt32Field(value: _storage._altitude, fieldNumber: 12)
      }
      if !_storage._attributes.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: _storage._attributes, fieldNumber: 13)
      }
      if !_storage._description_p.isEmpty {
        try visitor.visitSingularStringField(value: _storage._description_p, fieldNumber: 20)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Handler_DeviceList: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".DeviceList"

  var devices: [Handler_Device] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.devices)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.devices.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.devices, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// DryDownlinkMessage is a simulated message to test downlink processing
struct Handler_DryDownlinkMessage: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".DryDownlinkMessage"

  /// The binary payload to use
  var payload: Data {
    get {return _storage._payload}
    set {_uniqueStorage()._payload = newValue}
  }

  /// JSON-encoded object with fields to encode
  var fields: String {
    get {return _storage._fields}
    set {_uniqueStorage()._fields = newValue}
  }

  /// The Application containing the payload functions that should be executed
  var app: Handler_Application {
    get {return _storage._app ?? Handler_Application()}
    set {_uniqueStorage()._app = newValue}
  }
  /// Returns true if `app` has been explicitly set.
  var hasApp: Bool {return _storage._app != nil}
  /// Clears the value of `app`. Subsequent reads from it will return its default value.
  mutating func clearApp() {_storage._app = nil}

  /// The port number that should be passed to the payload function
  var port: UInt32 {
    get {return _storage._port}
    set {_uniqueStorage()._port = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularBytesField(value: &_storage._payload)
        case 2: try decoder.decodeSingularStringField(value: &_storage._fields)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._app)
        case 4: try decoder.decodeSingularUInt32Field(value: &_storage._port)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._payload.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._payload, fieldNumber: 1)
      }
      if !_storage._fields.isEmpty {
        try visitor.visitSingularStringField(value: _storage._fields, fieldNumber: 2)
      }
      if let v = _storage._app {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if _storage._port != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._port, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// DryUplinkMessage is a simulated message to test uplink processing
struct Handler_DryUplinkMessage: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".DryUplinkMessage"

  /// The binary payload to use
  var payload: Data {
    get {return _storage._payload}
    set {_uniqueStorage()._payload = newValue}
  }

  /// The Application containing the payload functions that should be executed
  var app: Handler_Application {
    get {return _storage._app ?? Handler_Application()}
    set {_uniqueStorage()._app = newValue}
  }
  /// Returns true if `app` has been explicitly set.
  var hasApp: Bool {return _storage._app != nil}
  /// Clears the value of `app`. Subsequent reads from it will return its default value.
  mutating func clearApp() {_storage._app = nil}

  /// The port number that should be passed to the payload function
  var port: UInt32 {
    get {return _storage._port}
    set {_uniqueStorage()._port = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularBytesField(value: &_storage._payload)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._app)
        case 3: try decoder.decodeSingularUInt32Field(value: &_storage._port)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._payload.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._payload, fieldNumber: 1)
      }
      if let v = _storage._app {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if _storage._port != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._port, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// SimulatedUplinkMessage is a simulated uplink message
struct Handler_SimulatedUplinkMessage: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".SimulatedUplinkMessage"

  var appID: String = String()

  var devID: String = String()

  /// The binary payload to use
  var payload: Data = SwiftProtobuf.Internal.emptyData

  /// The port number
  var port: UInt32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.appID)
      case 2: try decoder.decodeSingularStringField(value: &self.devID)
      case 3: try decoder.decodeSingularBytesField(value: &self.payload)
      case 4: try decoder.decodeSingularUInt32Field(value: &self.port)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.appID.isEmpty {
      try visitor.visitSingularStringField(value: self.appID, fieldNumber: 1)
    }
    if !self.devID.isEmpty {
      try visitor.visitSingularStringField(value: self.devID, fieldNumber: 2)
    }
    if !self.payload.isEmpty {
      try visitor.visitSingularBytesField(value: self.payload, fieldNumber: 3)
    }
    if self.port != 0 {
      try visitor.visitSingularUInt32Field(value: self.port, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Handler_LogEntry: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".LogEntry"

  /// The location where the log was created (what payload function)
  var function: String = String()

  /// A list of JSON-encoded fields that were logged
  var fields: [String] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.function)
      case 2: try decoder.decodeRepeatedStringField(value: &self.fields)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.function.isEmpty {
      try visitor.visitSingularStringField(value: self.function, fieldNumber: 1)
    }
    if !self.fields.isEmpty {
      try visitor.visitRepeatedStringField(value: self.fields, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// DryUplinkResult is the result from an uplink simulation
struct Handler_DryUplinkResult: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".DryUplinkResult"

  /// The binary payload
  var payload: Data = SwiftProtobuf.Internal.emptyData

  /// The decoded fields
  var fields: String = String()

  /// Was validation of the message successful
  var valid: Bool = false

  /// Logs that have been generated while processing
  var logs: [Handler_LogEntry] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self.payload)
      case 2: try decoder.decodeSingularStringField(value: &self.fields)
      case 3: try decoder.decodeSingularBoolField(value: &self.valid)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.logs)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.payload.isEmpty {
      try visitor.visitSingularBytesField(value: self.payload, fieldNumber: 1)
    }
    if !self.fields.isEmpty {
      try visitor.visitSingularStringField(value: self.fields, fieldNumber: 2)
    }
    if self.valid != false {
      try visitor.visitSingularBoolField(value: self.valid, fieldNumber: 3)
    }
    if !self.logs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.logs, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// DryDownlinkResult is the result from a downlink simulation
struct Handler_DryDownlinkResult: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".DryDownlinkResult"

  /// The payload that was encoded
  var payload: Data = SwiftProtobuf.Internal.emptyData

  /// Logs that have been generated while processing
  var logs: [Handler_LogEntry] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self.payload)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.logs)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.payload.isEmpty {
      try visitor.visitSingularBytesField(value: self.payload, fieldNumber: 1)
    }
    if !self.logs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.logs, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "handler"

extension Handler_DeviceActivationResponse: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "payload"),
    2: .same(proto: "message"),
    11: .standard(proto: "downlink_option"),
    23: .standard(proto: "activation_metadata"),
    31: .same(proto: "trace"),
  ]

  fileprivate class _StorageClass {
    var _payload: Data = SwiftProtobuf.Internal.emptyData
    var _message: Protocol_Message? = nil
    var _downlinkOption: Broker_DownlinkOption? = nil
    var _activationMetadata: Protocol_ActivationMetadata? = nil
    var _trace: Trace_Trace? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _payload = source._payload
      _message = source._message
      _downlinkOption = source._downlinkOption
      _activationMetadata = source._activationMetadata
      _trace = source._trace
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Handler_DeviceActivationResponse) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._payload != other_storage._payload {return false}
        if _storage._message != other_storage._message {return false}
        if _storage._downlinkOption != other_storage._downlinkOption {return false}
        if _storage._activationMetadata != other_storage._activationMetadata {return false}
        if _storage._trace != other_storage._trace {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Handler_StatusRequest: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  func _protobuf_generated_isEqualTo(other: Handler_StatusRequest) -> Bool {
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Handler_Status: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "system"),
    2: .same(proto: "component"),
    11: .same(proto: "uplink"),
    12: .same(proto: "downlink"),
    13: .same(proto: "activations"),
  ]

  fileprivate class _StorageClass {
    var _system: Api_SystemStats? = nil
    var _component: Api_ComponentStats? = nil
    var _uplink: Api_Rates? = nil
    var _downlink: Api_Rates? = nil
    var _activations: Api_Rates? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _system = source._system
      _component = source._component
      _uplink = source._uplink
      _downlink = source._downlink
      _activations = source._activations
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Handler_Status) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._system != other_storage._system {return false}
        if _storage._component != other_storage._component {return false}
        if _storage._uplink != other_storage._uplink {return false}
        if _storage._downlink != other_storage._downlink {return false}
        if _storage._activations != other_storage._activations {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Handler_ApplicationIdentifier: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "app_id"),
  ]

  func _protobuf_generated_isEqualTo(other: Handler_ApplicationIdentifier) -> Bool {
    if self.appID != other.appID {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Handler_Application: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "app_id"),
    6: .standard(proto: "payload_format"),
    2: .same(proto: "decoder"),
    3: .same(proto: "converter"),
    4: .same(proto: "validator"),
    5: .same(proto: "encoder"),
    7: .standard(proto: "register_on_join_access_key"),
  ]

  func _protobuf_generated_isEqualTo(other: Handler_Application) -> Bool {
    if self.appID != other.appID {return false}
    if self.payloadFormat != other.payloadFormat {return false}
    if self.decoder != other.decoder {return false}
    if self.converter != other.converter {return false}
    if self.validator != other.validator {return false}
    if self.encoder != other.encoder {return false}
    if self.registerOnJoinAccessKey != other.registerOnJoinAccessKey {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Handler_DeviceIdentifier: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "app_id"),
    2: .standard(proto: "dev_id"),
  ]

  func _protobuf_generated_isEqualTo(other: Handler_DeviceIdentifier) -> Bool {
    if self.appID != other.appID {return false}
    if self.devID != other.devID {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Handler_Device: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "app_id"),
    2: .standard(proto: "dev_id"),
    3: .standard(proto: "lorawan_device"),
    10: .same(proto: "latitude"),
    11: .same(proto: "longitude"),
    12: .same(proto: "altitude"),
    13: .same(proto: "attributes"),
    20: .same(proto: "description"),
  ]

  fileprivate class _StorageClass {
    var _appID: String = String()
    var _devID: String = String()
    var _device: Handler_Device.OneOf_Device?
    var _latitude: Float = 0
    var _longitude: Float = 0
    var _altitude: Int32 = 0
    var _attributes: Dictionary<String,String> = [:]
    var _description_p: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _appID = source._appID
      _devID = source._devID
      _device = source._device
      _latitude = source._latitude
      _longitude = source._longitude
      _altitude = source._altitude
      _attributes = source._attributes
      _description_p = source._description_p
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Handler_Device) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._appID != other_storage._appID {return false}
        if _storage._devID != other_storage._devID {return false}
        if _storage._device != other_storage._device {return false}
        if _storage._latitude != other_storage._latitude {return false}
        if _storage._longitude != other_storage._longitude {return false}
        if _storage._altitude != other_storage._altitude {return false}
        if _storage._attributes != other_storage._attributes {return false}
        if _storage._description_p != other_storage._description_p {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Handler_DeviceList: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "devices"),
  ]

  func _protobuf_generated_isEqualTo(other: Handler_DeviceList) -> Bool {
    if self.devices != other.devices {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Handler_DryDownlinkMessage: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "payload"),
    2: .same(proto: "fields"),
    3: .same(proto: "app"),
    4: .same(proto: "port"),
  ]

  fileprivate class _StorageClass {
    var _payload: Data = SwiftProtobuf.Internal.emptyData
    var _fields: String = String()
    var _app: Handler_Application? = nil
    var _port: UInt32 = 0

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _payload = source._payload
      _fields = source._fields
      _app = source._app
      _port = source._port
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Handler_DryDownlinkMessage) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._payload != other_storage._payload {return false}
        if _storage._fields != other_storage._fields {return false}
        if _storage._app != other_storage._app {return false}
        if _storage._port != other_storage._port {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Handler_DryUplinkMessage: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "payload"),
    2: .same(proto: "app"),
    3: .same(proto: "port"),
  ]

  fileprivate class _StorageClass {
    var _payload: Data = SwiftProtobuf.Internal.emptyData
    var _app: Handler_Application? = nil
    var _port: UInt32 = 0

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _payload = source._payload
      _app = source._app
      _port = source._port
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Handler_DryUplinkMessage) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._payload != other_storage._payload {return false}
        if _storage._app != other_storage._app {return false}
        if _storage._port != other_storage._port {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Handler_SimulatedUplinkMessage: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "app_id"),
    2: .standard(proto: "dev_id"),
    3: .same(proto: "payload"),
    4: .same(proto: "port"),
  ]

  func _protobuf_generated_isEqualTo(other: Handler_SimulatedUplinkMessage) -> Bool {
    if self.appID != other.appID {return false}
    if self.devID != other.devID {return false}
    if self.payload != other.payload {return false}
    if self.port != other.port {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Handler_LogEntry: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "function"),
    2: .same(proto: "fields"),
  ]

  func _protobuf_generated_isEqualTo(other: Handler_LogEntry) -> Bool {
    if self.function != other.function {return false}
    if self.fields != other.fields {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Handler_DryUplinkResult: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "payload"),
    2: .same(proto: "fields"),
    3: .same(proto: "valid"),
    4: .same(proto: "logs"),
  ]

  func _protobuf_generated_isEqualTo(other: Handler_DryUplinkResult) -> Bool {
    if self.payload != other.payload {return false}
    if self.fields != other.fields {return false}
    if self.valid != other.valid {return false}
    if self.logs != other.logs {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Handler_DryDownlinkResult: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "payload"),
    2: .same(proto: "logs"),
  ]

  func _protobuf_generated_isEqualTo(other: Handler_DryDownlinkResult) -> Bool {
    if self.payload != other.payload {return false}
    if self.logs != other.logs {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
