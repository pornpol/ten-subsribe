/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: github.com/TheThingsNetwork/api/handler/handler.proto
 *
 */

/*
 * Copyright 2017, gRPC Authors All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import Foundation
import Dispatch
import gRPC

/// Type for errors thrown from generated server code.
internal enum Handler_HandlerServerError : Error {
  case endOfStream
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol Handler_HandlerProvider {
  func activationchallenge(request : Broker_ActivationChallengeRequest, session : Handler_HandlerActivationChallengeSession) throws -> Broker_ActivationChallengeResponse
  func activate(request : Broker_DeduplicatedDeviceActivationRequest, session : Handler_HandlerActivateSession) throws -> Handler_DeviceActivationResponse
}

/// Common properties available in each service session.
internal class Handler_HandlerSession {
  fileprivate var handler : gRPC.Handler
  internal var requestMetadata : Metadata { return handler.requestMetadata }

  internal var statusCode : Int = 0
  internal var statusMessage : String = "OK"
  internal var initialMetadata : Metadata = Metadata()
  internal var trailingMetadata : Metadata = Metadata()

  fileprivate init(handler:gRPC.Handler) {
    self.handler = handler
  }
}

// ActivationChallenge (Unary)
internal class Handler_HandlerActivationChallengeSession : Handler_HandlerSession {
  private var provider : Handler_HandlerProvider

  /// Create a session.
  fileprivate init(handler:gRPC.Handler, provider: Handler_HandlerProvider) {
    self.provider = provider
    super.init(handler:handler)
  }

  /// Run the session. Internal.
  fileprivate func run(queue:DispatchQueue) throws {
    try handler.receiveMessage(initialMetadata:initialMetadata) {(requestData) in
      if let requestData = requestData {
        let requestMessage = try Broker_ActivationChallengeRequest(serializedData:requestData)
        let replyMessage = try self.provider.activationchallenge(request:requestMessage, session: self)
        try self.handler.sendResponse(message:replyMessage.serializedData(),
                                      statusCode:self.statusCode,
                                      statusMessage:self.statusMessage,
                                      trailingMetadata:self.trailingMetadata)
      }
    }
  }
}

// Activate (Unary)
internal class Handler_HandlerActivateSession : Handler_HandlerSession {
  private var provider : Handler_HandlerProvider

  /// Create a session.
  fileprivate init(handler:gRPC.Handler, provider: Handler_HandlerProvider) {
    self.provider = provider
    super.init(handler:handler)
  }

  /// Run the session. Internal.
  fileprivate func run(queue:DispatchQueue) throws {
    try handler.receiveMessage(initialMetadata:initialMetadata) {(requestData) in
      if let requestData = requestData {
        let requestMessage = try Broker_DeduplicatedDeviceActivationRequest(serializedData:requestData)
        let replyMessage = try self.provider.activate(request:requestMessage, session: self)
        try self.handler.sendResponse(message:replyMessage.serializedData(),
                                      statusCode:self.statusCode,
                                      statusMessage:self.statusMessage,
                                      trailingMetadata:self.trailingMetadata)
      }
    }
  }
}


/// Main server for generated service
internal class Handler_HandlerServer {
  private var address: String
  private var server: gRPC.Server
  private var provider: Handler_HandlerProvider?

  /// Create a server that accepts insecure connections.
  internal init(address:String,
              provider:Handler_HandlerProvider) {
    gRPC.initialize()
    self.address = address
    self.provider = provider
    self.server = gRPC.Server(address:address)
  }

  /// Create a server that accepts secure connections.
  internal init?(address:String,
               certificateURL:URL,
               keyURL:URL,
               provider:Handler_HandlerProvider) {
    gRPC.initialize()
    self.address = address
    self.provider = provider
    guard
      let certificate = try? String(contentsOf: certificateURL, encoding: .utf8),
      let key = try? String(contentsOf: keyURL, encoding: .utf8)
      else {
        return nil
    }
    self.server = gRPC.Server(address:address, key:key, certs:certificate)
  }

  /// Start the server.
  internal func start(queue:DispatchQueue = DispatchQueue.global()) {
    guard let provider = self.provider else {
      assert(false) // the server requires a provider
    }
    server.run {(handler) in
      print("Server received request to " + handler.host
        + " calling " + handler.method
        + " from " + handler.caller
        + " with " + String(describing:handler.requestMetadata) )

      do {
        switch handler.method {
        case "/handler.Handler/ActivationChallenge":
          try Handler_HandlerActivationChallengeSession(handler:handler, provider:provider).run(queue:queue)
        case "/handler.Handler/Activate":
          try Handler_HandlerActivateSession(handler:handler, provider:provider).run(queue:queue)
        default:
          break // handle unknown requests
        }
      } catch (let error) {
        print("Server error: \(error)")
      }
    }
  }
}

/// Type for errors thrown from generated server code.
internal enum Handler_ApplicationManagerServerError : Error {
  case endOfStream
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol Handler_ApplicationManagerProvider {
  func registerapplication(request : Handler_ApplicationIdentifier, session : Handler_ApplicationManagerRegisterApplicationSession) throws -> Google_Protobuf_Empty
  func getapplication(request : Handler_ApplicationIdentifier, session : Handler_ApplicationManagerGetApplicationSession) throws -> Handler_Application
  func setapplication(request : Handler_Application, session : Handler_ApplicationManagerSetApplicationSession) throws -> Google_Protobuf_Empty
  func deleteapplication(request : Handler_ApplicationIdentifier, session : Handler_ApplicationManagerDeleteApplicationSession) throws -> Google_Protobuf_Empty
  func getdevice(request : Handler_DeviceIdentifier, session : Handler_ApplicationManagerGetDeviceSession) throws -> Handler_Device
  func setdevice(request : Handler_Device, session : Handler_ApplicationManagerSetDeviceSession) throws -> Google_Protobuf_Empty
  func deletedevice(request : Handler_DeviceIdentifier, session : Handler_ApplicationManagerDeleteDeviceSession) throws -> Google_Protobuf_Empty
  func getdevicesforapplication(request : Handler_ApplicationIdentifier, session : Handler_ApplicationManagerGetDevicesForApplicationSession) throws -> Handler_DeviceList
  func drydownlink(request : Handler_DryDownlinkMessage, session : Handler_ApplicationManagerDryDownlinkSession) throws -> Handler_DryDownlinkResult
  func dryuplink(request : Handler_DryUplinkMessage, session : Handler_ApplicationManagerDryUplinkSession) throws -> Handler_DryUplinkResult
  func simulateuplink(request : Handler_SimulatedUplinkMessage, session : Handler_ApplicationManagerSimulateUplinkSession) throws -> Google_Protobuf_Empty
}

/// Common properties available in each service session.
internal class Handler_ApplicationManagerSession {
  fileprivate var handler : gRPC.Handler
  internal var requestMetadata : Metadata { return handler.requestMetadata }

  internal var statusCode : Int = 0
  internal var statusMessage : String = "OK"
  internal var initialMetadata : Metadata = Metadata()
  internal var trailingMetadata : Metadata = Metadata()

  fileprivate init(handler:gRPC.Handler) {
    self.handler = handler
  }
}

// RegisterApplication (Unary)
internal class Handler_ApplicationManagerRegisterApplicationSession : Handler_ApplicationManagerSession {
  private var provider : Handler_ApplicationManagerProvider

  /// Create a session.
  fileprivate init(handler:gRPC.Handler, provider: Handler_ApplicationManagerProvider) {
    self.provider = provider
    super.init(handler:handler)
  }

  /// Run the session. Internal.
  fileprivate func run(queue:DispatchQueue) throws {
    try handler.receiveMessage(initialMetadata:initialMetadata) {(requestData) in
      if let requestData = requestData {
        let requestMessage = try Handler_ApplicationIdentifier(serializedData:requestData)
        let replyMessage = try self.provider.registerapplication(request:requestMessage, session: self)
        try self.handler.sendResponse(message:replyMessage.serializedData(),
                                      statusCode:self.statusCode,
                                      statusMessage:self.statusMessage,
                                      trailingMetadata:self.trailingMetadata)
      }
    }
  }
}

// GetApplication (Unary)
internal class Handler_ApplicationManagerGetApplicationSession : Handler_ApplicationManagerSession {
  private var provider : Handler_ApplicationManagerProvider

  /// Create a session.
  fileprivate init(handler:gRPC.Handler, provider: Handler_ApplicationManagerProvider) {
    self.provider = provider
    super.init(handler:handler)
  }

  /// Run the session. Internal.
  fileprivate func run(queue:DispatchQueue) throws {
    try handler.receiveMessage(initialMetadata:initialMetadata) {(requestData) in
      if let requestData = requestData {
        let requestMessage = try Handler_ApplicationIdentifier(serializedData:requestData)
        let replyMessage = try self.provider.getapplication(request:requestMessage, session: self)
        try self.handler.sendResponse(message:replyMessage.serializedData(),
                                      statusCode:self.statusCode,
                                      statusMessage:self.statusMessage,
                                      trailingMetadata:self.trailingMetadata)
      }
    }
  }
}

// SetApplication (Unary)
internal class Handler_ApplicationManagerSetApplicationSession : Handler_ApplicationManagerSession {
  private var provider : Handler_ApplicationManagerProvider

  /// Create a session.
  fileprivate init(handler:gRPC.Handler, provider: Handler_ApplicationManagerProvider) {
    self.provider = provider
    super.init(handler:handler)
  }

  /// Run the session. Internal.
  fileprivate func run(queue:DispatchQueue) throws {
    try handler.receiveMessage(initialMetadata:initialMetadata) {(requestData) in
      if let requestData = requestData {
        let requestMessage = try Handler_Application(serializedData:requestData)
        let replyMessage = try self.provider.setapplication(request:requestMessage, session: self)
        try self.handler.sendResponse(message:replyMessage.serializedData(),
                                      statusCode:self.statusCode,
                                      statusMessage:self.statusMessage,
                                      trailingMetadata:self.trailingMetadata)
      }
    }
  }
}

// DeleteApplication (Unary)
internal class Handler_ApplicationManagerDeleteApplicationSession : Handler_ApplicationManagerSession {
  private var provider : Handler_ApplicationManagerProvider

  /// Create a session.
  fileprivate init(handler:gRPC.Handler, provider: Handler_ApplicationManagerProvider) {
    self.provider = provider
    super.init(handler:handler)
  }

  /// Run the session. Internal.
  fileprivate func run(queue:DispatchQueue) throws {
    try handler.receiveMessage(initialMetadata:initialMetadata) {(requestData) in
      if let requestData = requestData {
        let requestMessage = try Handler_ApplicationIdentifier(serializedData:requestData)
        let replyMessage = try self.provider.deleteapplication(request:requestMessage, session: self)
        try self.handler.sendResponse(message:replyMessage.serializedData(),
                                      statusCode:self.statusCode,
                                      statusMessage:self.statusMessage,
                                      trailingMetadata:self.trailingMetadata)
      }
    }
  }
}

// GetDevice (Unary)
internal class Handler_ApplicationManagerGetDeviceSession : Handler_ApplicationManagerSession {
  private var provider : Handler_ApplicationManagerProvider

  /// Create a session.
  fileprivate init(handler:gRPC.Handler, provider: Handler_ApplicationManagerProvider) {
    self.provider = provider
    super.init(handler:handler)
  }

  /// Run the session. Internal.
  fileprivate func run(queue:DispatchQueue) throws {
    try handler.receiveMessage(initialMetadata:initialMetadata) {(requestData) in
      if let requestData = requestData {
        let requestMessage = try Handler_DeviceIdentifier(serializedData:requestData)
        let replyMessage = try self.provider.getdevice(request:requestMessage, session: self)
        try self.handler.sendResponse(message:replyMessage.serializedData(),
                                      statusCode:self.statusCode,
                                      statusMessage:self.statusMessage,
                                      trailingMetadata:self.trailingMetadata)
      }
    }
  }
}

// SetDevice (Unary)
internal class Handler_ApplicationManagerSetDeviceSession : Handler_ApplicationManagerSession {
  private var provider : Handler_ApplicationManagerProvider

  /// Create a session.
  fileprivate init(handler:gRPC.Handler, provider: Handler_ApplicationManagerProvider) {
    self.provider = provider
    super.init(handler:handler)
  }

  /// Run the session. Internal.
  fileprivate func run(queue:DispatchQueue) throws {
    try handler.receiveMessage(initialMetadata:initialMetadata) {(requestData) in
      if let requestData = requestData {
        let requestMessage = try Handler_Device(serializedData:requestData)
        let replyMessage = try self.provider.setdevice(request:requestMessage, session: self)
        try self.handler.sendResponse(message:replyMessage.serializedData(),
                                      statusCode:self.statusCode,
                                      statusMessage:self.statusMessage,
                                      trailingMetadata:self.trailingMetadata)
      }
    }
  }
}

// DeleteDevice (Unary)
internal class Handler_ApplicationManagerDeleteDeviceSession : Handler_ApplicationManagerSession {
  private var provider : Handler_ApplicationManagerProvider

  /// Create a session.
  fileprivate init(handler:gRPC.Handler, provider: Handler_ApplicationManagerProvider) {
    self.provider = provider
    super.init(handler:handler)
  }

  /// Run the session. Internal.
  fileprivate func run(queue:DispatchQueue) throws {
    try handler.receiveMessage(initialMetadata:initialMetadata) {(requestData) in
      if let requestData = requestData {
        let requestMessage = try Handler_DeviceIdentifier(serializedData:requestData)
        let replyMessage = try self.provider.deletedevice(request:requestMessage, session: self)
        try self.handler.sendResponse(message:replyMessage.serializedData(),
                                      statusCode:self.statusCode,
                                      statusMessage:self.statusMessage,
                                      trailingMetadata:self.trailingMetadata)
      }
    }
  }
}

// GetDevicesForApplication (Unary)
internal class Handler_ApplicationManagerGetDevicesForApplicationSession : Handler_ApplicationManagerSession {
  private var provider : Handler_ApplicationManagerProvider

  /// Create a session.
  fileprivate init(handler:gRPC.Handler, provider: Handler_ApplicationManagerProvider) {
    self.provider = provider
    super.init(handler:handler)
  }

  /// Run the session. Internal.
  fileprivate func run(queue:DispatchQueue) throws {
    try handler.receiveMessage(initialMetadata:initialMetadata) {(requestData) in
      if let requestData = requestData {
        let requestMessage = try Handler_ApplicationIdentifier(serializedData:requestData)
        let replyMessage = try self.provider.getdevicesforapplication(request:requestMessage, session: self)
        try self.handler.sendResponse(message:replyMessage.serializedData(),
                                      statusCode:self.statusCode,
                                      statusMessage:self.statusMessage,
                                      trailingMetadata:self.trailingMetadata)
      }
    }
  }
}

// DryDownlink (Unary)
internal class Handler_ApplicationManagerDryDownlinkSession : Handler_ApplicationManagerSession {
  private var provider : Handler_ApplicationManagerProvider

  /// Create a session.
  fileprivate init(handler:gRPC.Handler, provider: Handler_ApplicationManagerProvider) {
    self.provider = provider
    super.init(handler:handler)
  }

  /// Run the session. Internal.
  fileprivate func run(queue:DispatchQueue) throws {
    try handler.receiveMessage(initialMetadata:initialMetadata) {(requestData) in
      if let requestData = requestData {
        let requestMessage = try Handler_DryDownlinkMessage(serializedData:requestData)
        let replyMessage = try self.provider.drydownlink(request:requestMessage, session: self)
        try self.handler.sendResponse(message:replyMessage.serializedData(),
                                      statusCode:self.statusCode,
                                      statusMessage:self.statusMessage,
                                      trailingMetadata:self.trailingMetadata)
      }
    }
  }
}

// DryUplink (Unary)
internal class Handler_ApplicationManagerDryUplinkSession : Handler_ApplicationManagerSession {
  private var provider : Handler_ApplicationManagerProvider

  /// Create a session.
  fileprivate init(handler:gRPC.Handler, provider: Handler_ApplicationManagerProvider) {
    self.provider = provider
    super.init(handler:handler)
  }

  /// Run the session. Internal.
  fileprivate func run(queue:DispatchQueue) throws {
    try handler.receiveMessage(initialMetadata:initialMetadata) {(requestData) in
      if let requestData = requestData {
        let requestMessage = try Handler_DryUplinkMessage(serializedData:requestData)
        let replyMessage = try self.provider.dryuplink(request:requestMessage, session: self)
        try self.handler.sendResponse(message:replyMessage.serializedData(),
                                      statusCode:self.statusCode,
                                      statusMessage:self.statusMessage,
                                      trailingMetadata:self.trailingMetadata)
      }
    }
  }
}

// SimulateUplink (Unary)
internal class Handler_ApplicationManagerSimulateUplinkSession : Handler_ApplicationManagerSession {
  private var provider : Handler_ApplicationManagerProvider

  /// Create a session.
  fileprivate init(handler:gRPC.Handler, provider: Handler_ApplicationManagerProvider) {
    self.provider = provider
    super.init(handler:handler)
  }

  /// Run the session. Internal.
  fileprivate func run(queue:DispatchQueue) throws {
    try handler.receiveMessage(initialMetadata:initialMetadata) {(requestData) in
      if let requestData = requestData {
        let requestMessage = try Handler_SimulatedUplinkMessage(serializedData:requestData)
        let replyMessage = try self.provider.simulateuplink(request:requestMessage, session: self)
        try self.handler.sendResponse(message:replyMessage.serializedData(),
                                      statusCode:self.statusCode,
                                      statusMessage:self.statusMessage,
                                      trailingMetadata:self.trailingMetadata)
      }
    }
  }
}


/// Main server for generated service
internal class Handler_ApplicationManagerServer {
  private var address: String
  private var server: gRPC.Server
  private var provider: Handler_ApplicationManagerProvider?

  /// Create a server that accepts insecure connections.
  internal init(address:String,
              provider:Handler_ApplicationManagerProvider) {
    gRPC.initialize()
    self.address = address
    self.provider = provider
    self.server = gRPC.Server(address:address)
  }

  /// Create a server that accepts secure connections.
  internal init?(address:String,
               certificateURL:URL,
               keyURL:URL,
               provider:Handler_ApplicationManagerProvider) {
    gRPC.initialize()
    self.address = address
    self.provider = provider
    guard
      let certificate = try? String(contentsOf: certificateURL, encoding: .utf8),
      let key = try? String(contentsOf: keyURL, encoding: .utf8)
      else {
        return nil
    }
    self.server = gRPC.Server(address:address, key:key, certs:certificate)
  }

  /// Start the server.
  internal func start(queue:DispatchQueue = DispatchQueue.global()) {
    guard let provider = self.provider else {
      assert(false) // the server requires a provider
    }
    server.run {(handler) in
      print("Server received request to " + handler.host
        + " calling " + handler.method
        + " from " + handler.caller
        + " with " + String(describing:handler.requestMetadata) )

      do {
        switch handler.method {
        case "/handler.ApplicationManager/RegisterApplication":
          try Handler_ApplicationManagerRegisterApplicationSession(handler:handler, provider:provider).run(queue:queue)
        case "/handler.ApplicationManager/GetApplication":
          try Handler_ApplicationManagerGetApplicationSession(handler:handler, provider:provider).run(queue:queue)
        case "/handler.ApplicationManager/SetApplication":
          try Handler_ApplicationManagerSetApplicationSession(handler:handler, provider:provider).run(queue:queue)
        case "/handler.ApplicationManager/DeleteApplication":
          try Handler_ApplicationManagerDeleteApplicationSession(handler:handler, provider:provider).run(queue:queue)
        case "/handler.ApplicationManager/GetDevice":
          try Handler_ApplicationManagerGetDeviceSession(handler:handler, provider:provider).run(queue:queue)
        case "/handler.ApplicationManager/SetDevice":
          try Handler_ApplicationManagerSetDeviceSession(handler:handler, provider:provider).run(queue:queue)
        case "/handler.ApplicationManager/DeleteDevice":
          try Handler_ApplicationManagerDeleteDeviceSession(handler:handler, provider:provider).run(queue:queue)
        case "/handler.ApplicationManager/GetDevicesForApplication":
          try Handler_ApplicationManagerGetDevicesForApplicationSession(handler:handler, provider:provider).run(queue:queue)
        case "/handler.ApplicationManager/DryDownlink":
          try Handler_ApplicationManagerDryDownlinkSession(handler:handler, provider:provider).run(queue:queue)
        case "/handler.ApplicationManager/DryUplink":
          try Handler_ApplicationManagerDryUplinkSession(handler:handler, provider:provider).run(queue:queue)
        case "/handler.ApplicationManager/SimulateUplink":
          try Handler_ApplicationManagerSimulateUplinkSession(handler:handler, provider:provider).run(queue:queue)
        default:
          break // handle unknown requests
        }
      } catch (let error) {
        print("Server error: \(error)")
      }
    }
  }
}

/// Type for errors thrown from generated server code.
internal enum Handler_HandlerManagerServerError : Error {
  case endOfStream
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol Handler_HandlerManagerProvider {
  func getstatus(request : Handler_StatusRequest, session : Handler_HandlerManagerGetStatusSession) throws -> Handler_Status
}

/// Common properties available in each service session.
internal class Handler_HandlerManagerSession {
  fileprivate var handler : gRPC.Handler
  internal var requestMetadata : Metadata { return handler.requestMetadata }

  internal var statusCode : Int = 0
  internal var statusMessage : String = "OK"
  internal var initialMetadata : Metadata = Metadata()
  internal var trailingMetadata : Metadata = Metadata()

  fileprivate init(handler:gRPC.Handler) {
    self.handler = handler
  }
}

// GetStatus (Unary)
internal class Handler_HandlerManagerGetStatusSession : Handler_HandlerManagerSession {
  private var provider : Handler_HandlerManagerProvider

  /// Create a session.
  fileprivate init(handler:gRPC.Handler, provider: Handler_HandlerManagerProvider) {
    self.provider = provider
    super.init(handler:handler)
  }

  /// Run the session. Internal.
  fileprivate func run(queue:DispatchQueue) throws {
    try handler.receiveMessage(initialMetadata:initialMetadata) {(requestData) in
      if let requestData = requestData {
        let requestMessage = try Handler_StatusRequest(serializedData:requestData)
        let replyMessage = try self.provider.getstatus(request:requestMessage, session: self)
        try self.handler.sendResponse(message:replyMessage.serializedData(),
                                      statusCode:self.statusCode,
                                      statusMessage:self.statusMessage,
                                      trailingMetadata:self.trailingMetadata)
      }
    }
  }
}


/// Main server for generated service
internal class Handler_HandlerManagerServer {
  private var address: String
  private var server: gRPC.Server
  private var provider: Handler_HandlerManagerProvider?

  /// Create a server that accepts insecure connections.
  internal init(address:String,
              provider:Handler_HandlerManagerProvider) {
    gRPC.initialize()
    self.address = address
    self.provider = provider
    self.server = gRPC.Server(address:address)
  }

  /// Create a server that accepts secure connections.
  internal init?(address:String,
               certificateURL:URL,
               keyURL:URL,
               provider:Handler_HandlerManagerProvider) {
    gRPC.initialize()
    self.address = address
    self.provider = provider
    guard
      let certificate = try? String(contentsOf: certificateURL, encoding: .utf8),
      let key = try? String(contentsOf: keyURL, encoding: .utf8)
      else {
        return nil
    }
    self.server = gRPC.Server(address:address, key:key, certs:certificate)
  }

  /// Start the server.
  internal func start(queue:DispatchQueue = DispatchQueue.global()) {
    guard let provider = self.provider else {
      assert(false) // the server requires a provider
    }
    server.run {(handler) in
      print("Server received request to " + handler.host
        + " calling " + handler.method
        + " from " + handler.caller
        + " with " + String(describing:handler.requestMetadata) )

      do {
        switch handler.method {
        case "/handler.HandlerManager/GetStatus":
          try Handler_HandlerManagerGetStatusSession(handler:handler, provider:provider).run(queue:queue)
        default:
          break // handle unknown requests
        }
      } catch (let error) {
        print("Server error: \(error)")
      }
    }
  }
}
