// Code generated by protoc-gen-gogo.
// source: github.com/TheThingsNetwork/api/networkserver/networkserver.proto
// DO NOT EDIT!

/*
	Package networkserver is a generated protocol buffer package.

	It is generated from these files:
		github.com/TheThingsNetwork/api/networkserver/networkserver.proto

	It has these top-level messages:
		DevicesRequest
		DevicesResponse
		StatusRequest
		Status
*/
package networkserver

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import api "github.com/TheThingsNetwork/api"
import lorawan "github.com/TheThingsNetwork/api/protocol/lorawan"
import broker "github.com/TheThingsNetwork/api/broker"
import handler "github.com/TheThingsNetwork/api/handler"

import github_com_TheThingsNetwork_ttn_core_types "github.com/TheThingsNetwork/ttn/core/types"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type DevicesRequest struct {
	// Device address from the uplink message
	DevAddr github_com_TheThingsNetwork_ttn_core_types.DevAddr `protobuf:"bytes,1,opt,name=dev_addr,json=devAddr,proto3,customtype=github.com/TheThingsNetwork/ttn/core/types.DevAddr" json:"dev_addr"`
	// Frame counter from the uplink message
	FCnt uint32 `protobuf:"varint,2,opt,name=f_cnt,json=fCnt,proto3" json:"f_cnt,omitempty"`
}

func (m *DevicesRequest) Reset()                    { *m = DevicesRequest{} }
func (*DevicesRequest) ProtoMessage()               {}
func (*DevicesRequest) Descriptor() ([]byte, []int) { return fileDescriptorNetworkserver, []int{0} }

func (m *DevicesRequest) GetFCnt() uint32 {
	if m != nil {
		return m.FCnt
	}
	return 0
}

type DevicesResponse struct {
	Results []*lorawan.Device `protobuf:"bytes,1,rep,name=results" json:"results,omitempty"`
}

func (m *DevicesResponse) Reset()                    { *m = DevicesResponse{} }
func (*DevicesResponse) ProtoMessage()               {}
func (*DevicesResponse) Descriptor() ([]byte, []int) { return fileDescriptorNetworkserver, []int{1} }

func (m *DevicesResponse) GetResults() []*lorawan.Device {
	if m != nil {
		return m.Results
	}
	return nil
}

// message StatusRequest is used to request the status of this NetworkServer
type StatusRequest struct {
}

func (m *StatusRequest) Reset()                    { *m = StatusRequest{} }
func (*StatusRequest) ProtoMessage()               {}
func (*StatusRequest) Descriptor() ([]byte, []int) { return fileDescriptorNetworkserver, []int{2} }

// message Status is the response to the StatusRequest
type Status struct {
	System            api.SystemStats    `protobuf:"bytes,1,opt,name=system" json:"system"`
	Component         api.ComponentStats `protobuf:"bytes,2,opt,name=component" json:"component"`
	Uplink            *api.Rates         `protobuf:"bytes,11,opt,name=uplink" json:"uplink,omitempty"`
	Downlink          *api.Rates         `protobuf:"bytes,12,opt,name=downlink" json:"downlink,omitempty"`
	Activations       *api.Rates         `protobuf:"bytes,13,opt,name=activations" json:"activations,omitempty"`
	DevicesPerAddress *api.Percentiles   `protobuf:"bytes,21,opt,name=devices_per_address,json=devicesPerAddress" json:"devices_per_address,omitempty"`
}

func (m *Status) Reset()                    { *m = Status{} }
func (*Status) ProtoMessage()               {}
func (*Status) Descriptor() ([]byte, []int) { return fileDescriptorNetworkserver, []int{3} }

func (m *Status) GetSystem() api.SystemStats {
	if m != nil {
		return m.System
	}
	return api.SystemStats{}
}

func (m *Status) GetComponent() api.ComponentStats {
	if m != nil {
		return m.Component
	}
	return api.ComponentStats{}
}

func (m *Status) GetUplink() *api.Rates {
	if m != nil {
		return m.Uplink
	}
	return nil
}

func (m *Status) GetDownlink() *api.Rates {
	if m != nil {
		return m.Downlink
	}
	return nil
}

func (m *Status) GetActivations() *api.Rates {
	if m != nil {
		return m.Activations
	}
	return nil
}

func (m *Status) GetDevicesPerAddress() *api.Percentiles {
	if m != nil {
		return m.DevicesPerAddress
	}
	return nil
}

func init() {
	proto.RegisterType((*DevicesRequest)(nil), "networkserver.DevicesRequest")
	proto.RegisterType((*DevicesResponse)(nil), "networkserver.DevicesResponse")
	proto.RegisterType((*StatusRequest)(nil), "networkserver.StatusRequest")
	proto.RegisterType((*Status)(nil), "networkserver.Status")
}
func (this *DevicesRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*DevicesRequest)
	if !ok {
		that2, ok := that.(DevicesRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *DevicesRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *DevicesRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *DevicesRequest but is not nil && this == nil")
	}
	if !this.DevAddr.Equal(that1.DevAddr) {
		return fmt.Errorf("DevAddr this(%v) Not Equal that(%v)", this.DevAddr, that1.DevAddr)
	}
	if this.FCnt != that1.FCnt {
		return fmt.Errorf("FCnt this(%v) Not Equal that(%v)", this.FCnt, that1.FCnt)
	}
	return nil
}
func (this *DevicesRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*DevicesRequest)
	if !ok {
		that2, ok := that.(DevicesRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.DevAddr.Equal(that1.DevAddr) {
		return false
	}
	if this.FCnt != that1.FCnt {
		return false
	}
	return true
}
func (this *DevicesResponse) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*DevicesResponse)
	if !ok {
		that2, ok := that.(DevicesResponse)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *DevicesResponse")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *DevicesResponse but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *DevicesResponse but is not nil && this == nil")
	}
	if len(this.Results) != len(that1.Results) {
		return fmt.Errorf("Results this(%v) Not Equal that(%v)", len(this.Results), len(that1.Results))
	}
	for i := range this.Results {
		if !this.Results[i].Equal(that1.Results[i]) {
			return fmt.Errorf("Results this[%v](%v) Not Equal that[%v](%v)", i, this.Results[i], i, that1.Results[i])
		}
	}
	return nil
}
func (this *DevicesResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*DevicesResponse)
	if !ok {
		that2, ok := that.(DevicesResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Results) != len(that1.Results) {
		return false
	}
	for i := range this.Results {
		if !this.Results[i].Equal(that1.Results[i]) {
			return false
		}
	}
	return true
}
func (this *StatusRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*StatusRequest)
	if !ok {
		that2, ok := that.(StatusRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *StatusRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *StatusRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *StatusRequest but is not nil && this == nil")
	}
	return nil
}
func (this *StatusRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*StatusRequest)
	if !ok {
		that2, ok := that.(StatusRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}
func (this *Status) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Status)
	if !ok {
		that2, ok := that.(Status)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Status")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Status but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Status but is not nil && this == nil")
	}
	if !this.System.Equal(&that1.System) {
		return fmt.Errorf("System this(%v) Not Equal that(%v)", this.System, that1.System)
	}
	if !this.Component.Equal(&that1.Component) {
		return fmt.Errorf("Component this(%v) Not Equal that(%v)", this.Component, that1.Component)
	}
	if !this.Uplink.Equal(that1.Uplink) {
		return fmt.Errorf("Uplink this(%v) Not Equal that(%v)", this.Uplink, that1.Uplink)
	}
	if !this.Downlink.Equal(that1.Downlink) {
		return fmt.Errorf("Downlink this(%v) Not Equal that(%v)", this.Downlink, that1.Downlink)
	}
	if !this.Activations.Equal(that1.Activations) {
		return fmt.Errorf("Activations this(%v) Not Equal that(%v)", this.Activations, that1.Activations)
	}
	if !this.DevicesPerAddress.Equal(that1.DevicesPerAddress) {
		return fmt.Errorf("DevicesPerAddress this(%v) Not Equal that(%v)", this.DevicesPerAddress, that1.DevicesPerAddress)
	}
	return nil
}
func (this *Status) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Status)
	if !ok {
		that2, ok := that.(Status)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.System.Equal(&that1.System) {
		return false
	}
	if !this.Component.Equal(&that1.Component) {
		return false
	}
	if !this.Uplink.Equal(that1.Uplink) {
		return false
	}
	if !this.Downlink.Equal(that1.Downlink) {
		return false
	}
	if !this.Activations.Equal(that1.Activations) {
		return false
	}
	if !this.DevicesPerAddress.Equal(that1.DevicesPerAddress) {
		return false
	}
	return true
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for NetworkServer service

type NetworkServerClient interface {
	// Broker requests devices with DevAddr and matching FCnt (or disabled FCnt check)
	GetDevices(ctx context.Context, in *DevicesRequest, opts ...grpc.CallOption) (*DevicesResponse, error)
	// Broker requests device activation "template" from Network Server
	PrepareActivation(ctx context.Context, in *broker.DeduplicatedDeviceActivationRequest, opts ...grpc.CallOption) (*broker.DeduplicatedDeviceActivationRequest, error)
	// Broker confirms device activation (after response from Handler)
	Activate(ctx context.Context, in *handler.DeviceActivationResponse, opts ...grpc.CallOption) (*handler.DeviceActivationResponse, error)
	// Broker informs Network Server about Uplink
	Uplink(ctx context.Context, in *broker.DeduplicatedUplinkMessage, opts ...grpc.CallOption) (*broker.DeduplicatedUplinkMessage, error)
	// Broker informs Network Server about Downlink, NetworkServer may add MAC commands and re-set MIC
	Downlink(ctx context.Context, in *broker.DownlinkMessage, opts ...grpc.CallOption) (*broker.DownlinkMessage, error)
}

type networkServerClient struct {
	cc *grpc.ClientConn
}

func NewNetworkServerClient(cc *grpc.ClientConn) NetworkServerClient {
	return &networkServerClient{cc}
}

func (c *networkServerClient) GetDevices(ctx context.Context, in *DevicesRequest, opts ...grpc.CallOption) (*DevicesResponse, error) {
	out := new(DevicesResponse)
	err := grpc.Invoke(ctx, "/networkserver.NetworkServer/GetDevices", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerClient) PrepareActivation(ctx context.Context, in *broker.DeduplicatedDeviceActivationRequest, opts ...grpc.CallOption) (*broker.DeduplicatedDeviceActivationRequest, error) {
	out := new(broker.DeduplicatedDeviceActivationRequest)
	err := grpc.Invoke(ctx, "/networkserver.NetworkServer/PrepareActivation", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerClient) Activate(ctx context.Context, in *handler.DeviceActivationResponse, opts ...grpc.CallOption) (*handler.DeviceActivationResponse, error) {
	out := new(handler.DeviceActivationResponse)
	err := grpc.Invoke(ctx, "/networkserver.NetworkServer/Activate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerClient) Uplink(ctx context.Context, in *broker.DeduplicatedUplinkMessage, opts ...grpc.CallOption) (*broker.DeduplicatedUplinkMessage, error) {
	out := new(broker.DeduplicatedUplinkMessage)
	err := grpc.Invoke(ctx, "/networkserver.NetworkServer/Uplink", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerClient) Downlink(ctx context.Context, in *broker.DownlinkMessage, opts ...grpc.CallOption) (*broker.DownlinkMessage, error) {
	out := new(broker.DownlinkMessage)
	err := grpc.Invoke(ctx, "/networkserver.NetworkServer/Downlink", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for NetworkServer service

type NetworkServerServer interface {
	// Broker requests devices with DevAddr and matching FCnt (or disabled FCnt check)
	GetDevices(context.Context, *DevicesRequest) (*DevicesResponse, error)
	// Broker requests device activation "template" from Network Server
	PrepareActivation(context.Context, *broker.DeduplicatedDeviceActivationRequest) (*broker.DeduplicatedDeviceActivationRequest, error)
	// Broker confirms device activation (after response from Handler)
	Activate(context.Context, *handler.DeviceActivationResponse) (*handler.DeviceActivationResponse, error)
	// Broker informs Network Server about Uplink
	Uplink(context.Context, *broker.DeduplicatedUplinkMessage) (*broker.DeduplicatedUplinkMessage, error)
	// Broker informs Network Server about Downlink, NetworkServer may add MAC commands and re-set MIC
	Downlink(context.Context, *broker.DownlinkMessage) (*broker.DownlinkMessage, error)
}

func RegisterNetworkServerServer(s *grpc.Server, srv NetworkServerServer) {
	s.RegisterService(&_NetworkServer_serviceDesc, srv)
}

func _NetworkServer_GetDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DevicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServer).GetDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/networkserver.NetworkServer/GetDevices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServer).GetDevices(ctx, req.(*DevicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServer_PrepareActivation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(broker.DeduplicatedDeviceActivationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServer).PrepareActivation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/networkserver.NetworkServer/PrepareActivation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServer).PrepareActivation(ctx, req.(*broker.DeduplicatedDeviceActivationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServer_Activate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(handler.DeviceActivationResponse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServer).Activate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/networkserver.NetworkServer/Activate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServer).Activate(ctx, req.(*handler.DeviceActivationResponse))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServer_Uplink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(broker.DeduplicatedUplinkMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServer).Uplink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/networkserver.NetworkServer/Uplink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServer).Uplink(ctx, req.(*broker.DeduplicatedUplinkMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServer_Downlink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(broker.DownlinkMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServer).Downlink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/networkserver.NetworkServer/Downlink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServer).Downlink(ctx, req.(*broker.DownlinkMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _NetworkServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "networkserver.NetworkServer",
	HandlerType: (*NetworkServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDevices",
			Handler:    _NetworkServer_GetDevices_Handler,
		},
		{
			MethodName: "PrepareActivation",
			Handler:    _NetworkServer_PrepareActivation_Handler,
		},
		{
			MethodName: "Activate",
			Handler:    _NetworkServer_Activate_Handler,
		},
		{
			MethodName: "Uplink",
			Handler:    _NetworkServer_Uplink_Handler,
		},
		{
			MethodName: "Downlink",
			Handler:    _NetworkServer_Downlink_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/TheThingsNetwork/api/networkserver/networkserver.proto",
}

// Client API for NetworkServerManager service

type NetworkServerManagerClient interface {
	GetStatus(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*Status, error)
}

type networkServerManagerClient struct {
	cc *grpc.ClientConn
}

func NewNetworkServerManagerClient(cc *grpc.ClientConn) NetworkServerManagerClient {
	return &networkServerManagerClient{cc}
}

func (c *networkServerManagerClient) GetStatus(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := grpc.Invoke(ctx, "/networkserver.NetworkServerManager/GetStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for NetworkServerManager service

type NetworkServerManagerServer interface {
	GetStatus(context.Context, *StatusRequest) (*Status, error)
}

func RegisterNetworkServerManagerServer(s *grpc.Server, srv NetworkServerManagerServer) {
	s.RegisterService(&_NetworkServerManager_serviceDesc, srv)
}

func _NetworkServerManager_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerManagerServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/networkserver.NetworkServerManager/GetStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerManagerServer).GetStatus(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NetworkServerManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "networkserver.NetworkServerManager",
	HandlerType: (*NetworkServerManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStatus",
			Handler:    _NetworkServerManager_GetStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/TheThingsNetwork/api/networkserver/networkserver.proto",
}

func (m *DevicesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DevicesRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintNetworkserver(dAtA, i, uint64(m.DevAddr.Size()))
	n1, err := m.DevAddr.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	if m.FCnt != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintNetworkserver(dAtA, i, uint64(m.FCnt))
	}
	return i, nil
}

func (m *DevicesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DevicesResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Results) > 0 {
		for _, msg := range m.Results {
			dAtA[i] = 0xa
			i++
			i = encodeVarintNetworkserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *StatusRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StatusRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *Status) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Status) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintNetworkserver(dAtA, i, uint64(m.System.Size()))
	n2, err := m.System.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	dAtA[i] = 0x12
	i++
	i = encodeVarintNetworkserver(dAtA, i, uint64(m.Component.Size()))
	n3, err := m.Component.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	if m.Uplink != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintNetworkserver(dAtA, i, uint64(m.Uplink.Size()))
		n4, err := m.Uplink.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.Downlink != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintNetworkserver(dAtA, i, uint64(m.Downlink.Size()))
		n5, err := m.Downlink.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.Activations != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintNetworkserver(dAtA, i, uint64(m.Activations.Size()))
		n6, err := m.Activations.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.DevicesPerAddress != nil {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintNetworkserver(dAtA, i, uint64(m.DevicesPerAddress.Size()))
		n7, err := m.DevicesPerAddress.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}

func encodeFixed64Networkserver(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Networkserver(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintNetworkserver(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *DevicesRequest) Size() (n int) {
	var l int
	_ = l
	l = m.DevAddr.Size()
	n += 1 + l + sovNetworkserver(uint64(l))
	if m.FCnt != 0 {
		n += 1 + sovNetworkserver(uint64(m.FCnt))
	}
	return n
}

func (m *DevicesResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Results) > 0 {
		for _, e := range m.Results {
			l = e.Size()
			n += 1 + l + sovNetworkserver(uint64(l))
		}
	}
	return n
}

func (m *StatusRequest) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *Status) Size() (n int) {
	var l int
	_ = l
	l = m.System.Size()
	n += 1 + l + sovNetworkserver(uint64(l))
	l = m.Component.Size()
	n += 1 + l + sovNetworkserver(uint64(l))
	if m.Uplink != nil {
		l = m.Uplink.Size()
		n += 1 + l + sovNetworkserver(uint64(l))
	}
	if m.Downlink != nil {
		l = m.Downlink.Size()
		n += 1 + l + sovNetworkserver(uint64(l))
	}
	if m.Activations != nil {
		l = m.Activations.Size()
		n += 1 + l + sovNetworkserver(uint64(l))
	}
	if m.DevicesPerAddress != nil {
		l = m.DevicesPerAddress.Size()
		n += 2 + l + sovNetworkserver(uint64(l))
	}
	return n
}

func sovNetworkserver(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozNetworkserver(x uint64) (n int) {
	return sovNetworkserver(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *DevicesRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DevicesRequest{`,
		`DevAddr:` + fmt.Sprintf("%v", this.DevAddr) + `,`,
		`FCnt:` + fmt.Sprintf("%v", this.FCnt) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DevicesResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DevicesResponse{`,
		`Results:` + strings.Replace(fmt.Sprintf("%v", this.Results), "Device", "lorawan.Device", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StatusRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StatusRequest{`,
		`}`,
	}, "")
	return s
}
func (this *Status) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Status{`,
		`System:` + strings.Replace(strings.Replace(this.System.String(), "SystemStats", "api.SystemStats", 1), `&`, ``, 1) + `,`,
		`Component:` + strings.Replace(strings.Replace(this.Component.String(), "ComponentStats", "api.ComponentStats", 1), `&`, ``, 1) + `,`,
		`Uplink:` + strings.Replace(fmt.Sprintf("%v", this.Uplink), "Rates", "api.Rates", 1) + `,`,
		`Downlink:` + strings.Replace(fmt.Sprintf("%v", this.Downlink), "Rates", "api.Rates", 1) + `,`,
		`Activations:` + strings.Replace(fmt.Sprintf("%v", this.Activations), "Rates", "api.Rates", 1) + `,`,
		`DevicesPerAddress:` + strings.Replace(fmt.Sprintf("%v", this.DevicesPerAddress), "Percentiles", "api.Percentiles", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringNetworkserver(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *DevicesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetworkserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DevicesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DevicesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevAddr", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNetworkserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DevAddr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FCnt", wireType)
			}
			m.FCnt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FCnt |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNetworkserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNetworkserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DevicesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetworkserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DevicesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DevicesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Results", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetworkserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Results = append(m.Results, &lorawan.Device{})
			if err := m.Results[len(m.Results)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetworkserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNetworkserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StatusRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetworkserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatusRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatusRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipNetworkserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNetworkserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Status) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetworkserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Status: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Status: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field System", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetworkserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.System.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Component", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetworkserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Component.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uplink", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetworkserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Uplink == nil {
				m.Uplink = &api.Rates{}
			}
			if err := m.Uplink.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Downlink", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetworkserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Downlink == nil {
				m.Downlink = &api.Rates{}
			}
			if err := m.Downlink.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Activations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetworkserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Activations == nil {
				m.Activations = &api.Rates{}
			}
			if err := m.Activations.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevicesPerAddress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetworkserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DevicesPerAddress == nil {
				m.DevicesPerAddress = &api.Percentiles{}
			}
			if err := m.DevicesPerAddress.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetworkserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNetworkserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNetworkserver(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNetworkserver
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNetworkserver
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNetworkserver
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthNetworkserver
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowNetworkserver
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipNetworkserver(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthNetworkserver = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNetworkserver   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/TheThingsNetwork/api/networkserver/networkserver.proto", fileDescriptorNetworkserver)
}

var fileDescriptorNetworkserver = []byte{
	// 681 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x94, 0xd1, 0x4a, 0x1b, 0x4d,
	0x14, 0xc7, 0x5d, 0xf5, 0x8b, 0x71, 0x62, 0x3e, 0xeb, 0x58, 0x69, 0x08, 0x76, 0xd5, 0x5c, 0x88,
	0xd2, 0xba, 0x0b, 0x91, 0x52, 0x28, 0x16, 0x4c, 0x0c, 0x48, 0x29, 0xca, 0xb2, 0x2a, 0x94, 0xde,
	0xc8, 0x64, 0xf7, 0xb8, 0x59, 0x4c, 0x66, 0xb6, 0x33, 0x93, 0x88, 0xd0, 0x8b, 0x3e, 0x42, 0x9f,
	0xa2, 0x94, 0x96, 0xbe, 0x87, 0x97, 0xbd, 0x2c, 0xbd, 0x10, 0x4d, 0x5f, 0xa4, 0x64, 0x76, 0x36,
	0x66, 0x8d, 0x36, 0x78, 0xb5, 0x33, 0xe7, 0xfc, 0xfe, 0x67, 0xce, 0xec, 0x39, 0x67, 0x50, 0x25,
	0x08, 0x65, 0xa3, 0x5d, 0xb7, 0x3c, 0xd6, 0xb2, 0x0f, 0x1b, 0x70, 0xd8, 0x08, 0x69, 0x20, 0xf6,
	0x41, 0x9e, 0x31, 0x7e, 0x6a, 0x93, 0x28, 0xb4, 0x69, 0xbc, 0x16, 0xc0, 0x3b, 0xc0, 0xd3, 0x3b,
	0x2b, 0xe2, 0x4c, 0x32, 0x9c, 0x4f, 0x19, 0x8b, 0x1b, 0x03, 0x11, 0x03, 0x16, 0x30, 0x5b, 0x51,
	0xf5, 0xf6, 0x89, 0xda, 0xa9, 0x8d, 0x5a, 0xc5, 0xea, 0xe2, 0xfa, 0xa8, 0x04, 0x48, 0x14, 0x6a,
	0xf4, 0xf5, 0x28, 0x54, 0x61, 0x1e, 0x6b, 0xda, 0x4d, 0xc6, 0xc9, 0x19, 0xa1, 0xb6, 0x0f, 0x9d,
	0xd0, 0x03, 0x2d, 0xdf, 0x1c, 0x25, 0xaf, 0x73, 0x76, 0x0a, 0x5c, 0x7f, 0xb4, 0xe8, 0xc5, 0x28,
	0x51, 0x83, 0x50, 0xbf, 0x09, 0x3c, 0xf9, 0xc6, 0xb2, 0xd2, 0x47, 0xf4, 0x7f, 0x4d, 0x9d, 0x2d,
	0x5c, 0xf8, 0xd0, 0x06, 0x21, 0xf1, 0x11, 0xca, 0xfa, 0xd0, 0x39, 0x26, 0xbe, 0xcf, 0x0b, 0xc6,
	0xb2, 0xb1, 0x36, 0x53, 0x7d, 0x75, 0x71, 0xb9, 0x34, 0xf6, 0xfb, 0x72, 0xa9, 0xfc, 0xaf, 0x23,
	0xa4, 0xa4, 0xb6, 0xc7, 0x38, 0xd8, 0xf2, 0x3c, 0x02, 0x61, 0xd5, 0xa0, 0x53, 0xf1, 0x7d, 0xee,
	0x4e, 0xf9, 0xf1, 0x02, 0xcf, 0xa3, 0xff, 0x4e, 0x8e, 0x3d, 0x2a, 0x0b, 0xe3, 0xcb, 0xc6, 0x5a,
	0xde, 0x9d, 0x3c, 0xd9, 0xa1, 0xb2, 0xb4, 0x85, 0x66, 0xfb, 0xa7, 0x8b, 0x88, 0x51, 0x01, 0x78,
	0x1d, 0x4d, 0x71, 0x10, 0xed, 0xa6, 0x14, 0x05, 0x63, 0x79, 0x62, 0x2d, 0x57, 0x9e, 0xb5, 0xf4,
	0x4f, 0xb2, 0x62, 0xd4, 0x4d, 0xfc, 0xa5, 0x59, 0x94, 0x3f, 0x90, 0x44, 0xb6, 0x93, 0xd4, 0x4b,
	0x3f, 0xc6, 0x51, 0x26, 0xb6, 0x60, 0x0b, 0x65, 0xc4, 0xb9, 0x90, 0xd0, 0x52, 0x77, 0xc8, 0x95,
	0x1f, 0x59, 0xbd, 0xf2, 0x1c, 0x28, 0x53, 0x0f, 0x11, 0xd5, 0xc9, 0xde, 0xad, 0x5c, 0x4d, 0xe1,
	0x97, 0x68, 0xda, 0x63, 0xad, 0x88, 0x51, 0xd0, 0x29, 0xe6, 0xca, 0xf3, 0x4a, 0xb2, 0x93, 0x58,
	0x07, 0x55, 0x37, 0x2c, 0x2e, 0xa1, 0x4c, 0x3b, 0x6a, 0x86, 0xf4, 0xb4, 0x90, 0x53, 0x2a, 0xa4,
	0x54, 0x2e, 0x91, 0x20, 0x5c, 0xed, 0xc1, 0xab, 0x28, 0xeb, 0xb3, 0x33, 0xaa, 0xa8, 0x99, 0x21,
	0xaa, 0xef, 0xc3, 0xcf, 0x51, 0x8e, 0x78, 0x32, 0xec, 0x10, 0x19, 0x32, 0x2a, 0x0a, 0xf9, 0x21,
	0x74, 0xd0, 0x8d, 0xb7, 0xd1, 0x7c, 0xdc, 0x36, 0xe2, 0x38, 0x02, 0xae, 0x0a, 0x06, 0x42, 0x14,
	0x16, 0x06, 0xee, 0xeb, 0x00, 0xf7, 0x80, 0xca, 0xb0, 0x09, 0xc2, 0x9d, 0xd3, 0xb0, 0x03, 0xbc,
	0x12, 0xa3, 0xe5, 0xef, 0x13, 0x28, 0xaf, 0xeb, 0x77, 0xa0, 0x66, 0x02, 0xbf, 0x45, 0x68, 0x17,
	0xa4, 0xae, 0x09, 0x7e, 0x6a, 0xa5, 0xc7, 0x28, 0xdd, 0x29, 0x45, 0xf3, 0x3e, 0xb7, 0x2e, 0x65,
	0x0b, 0xcd, 0x39, 0x1c, 0x22, 0xc2, 0xa1, 0xd2, 0x4f, 0x1b, 0x3f, 0xb3, 0x74, 0xdb, 0xd6, 0xc0,
	0xef, 0xfd, 0x1e, 0x8f, 0x48, 0xf0, 0x63, 0xe5, 0x0d, 0x95, 0x9c, 0xf0, 0x10, 0x18, 0x3b, 0x28,
	0xab, 0x8d, 0x80, 0x57, 0xac, 0xa4, 0xcd, 0x87, 0xe9, 0x38, 0xbb, 0xe2, 0x68, 0x04, 0xef, 0xa3,
	0xcc, 0x51, 0x5c, 0xc1, 0x95, 0xbb, 0x12, 0x89, 0x7d, 0x7b, 0x20, 0x04, 0x09, 0x7a, 0xf1, 0x46,
	0x21, 0x78, 0x0b, 0x65, 0x6b, 0x49, 0xad, 0x9f, 0xf4, 0x71, 0x6d, 0x49, 0xe2, 0xdc, 0xe7, 0x28,
	0xbf, 0x43, 0x8f, 0x53, 0xc5, 0xda, 0x23, 0x94, 0x04, 0xc0, 0xf1, 0x36, 0x9a, 0xde, 0x05, 0xa9,
	0xfb, 0x7e, 0xf1, 0x56, 0x4d, 0x52, 0x03, 0x52, 0x5c, 0xb8, 0xd3, 0x5b, 0xfd, 0x62, 0xfc, 0xba,
	0x36, 0xc7, 0xae, 0xae, 0x4d, 0xe3, 0x53, 0xd7, 0x34, 0xbe, 0x76, 0x4d, 0xe3, 0xa2, 0x6b, 0x1a,
	0x3f, 0xbb, 0xa6, 0x71, 0xd5, 0x35, 0x8d, 0xcf, 0x7f, 0xcc, 0x31, 0xb4, 0xca, 0x78, 0x60, 0xc9,
	0x06, 0x48, 0x35, 0xf4, 0x3a, 0x8a, 0xea, 0xb1, 0x54, 0xc4, 0xea, 0xcc, 0x1e, 0xa3, 0xa1, 0x64,
	0xdc, 0xe9, 0xbd, 0x2e, 0x8e, 0xf1, 0x7e, 0xe3, 0x41, 0xcf, 0xf6, 0xb7, 0xf1, 0xc5, 0xdb, 0x90,
	0x55, 0x71, 0xde, 0x58, 0x3a, 0x68, 0x3d, 0xa3, 0x1e, 0xad, 0xcd, 0xbf, 0x01, 0x00, 0x00, 0xff,
	0xff, 0x9b, 0xa7, 0xb6, 0x8c, 0x0d, 0x06, 0x00, 0x00,
}
