/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: github.com/TheThingsNetwork/api/networkserver/networkserver.proto
 *
 */

/*
 * Copyright 2017, gRPC Authors All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import Foundation
import Dispatch
import gRPC

/// Type for errors thrown from generated server code.
internal enum Networkserver_NetworkServerServerError : Error {
  case endOfStream
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol Networkserver_NetworkServerProvider {
  func getdevices(request : Networkserver_DevicesRequest, session : Networkserver_NetworkServerGetDevicesSession) throws -> Networkserver_DevicesResponse
  func prepareactivation(request : Broker_DeduplicatedDeviceActivationRequest, session : Networkserver_NetworkServerPrepareActivationSession) throws -> Broker_DeduplicatedDeviceActivationRequest
  func activate(request : Handler_DeviceActivationResponse, session : Networkserver_NetworkServerActivateSession) throws -> Handler_DeviceActivationResponse
  func uplink(request : Broker_DeduplicatedUplinkMessage, session : Networkserver_NetworkServerUplinkSession) throws -> Broker_DeduplicatedUplinkMessage
  func downlink(request : Broker_DownlinkMessage, session : Networkserver_NetworkServerDownlinkSession) throws -> Broker_DownlinkMessage
}

/// Common properties available in each service session.
internal class Networkserver_NetworkServerSession {
  fileprivate var handler : gRPC.Handler
  internal var requestMetadata : Metadata { return handler.requestMetadata }

  internal var statusCode : Int = 0
  internal var statusMessage : String = "OK"
  internal var initialMetadata : Metadata = Metadata()
  internal var trailingMetadata : Metadata = Metadata()

  fileprivate init(handler:gRPC.Handler) {
    self.handler = handler
  }
}

// GetDevices (Unary)
internal class Networkserver_NetworkServerGetDevicesSession : Networkserver_NetworkServerSession {
  private var provider : Networkserver_NetworkServerProvider

  /// Create a session.
  fileprivate init(handler:gRPC.Handler, provider: Networkserver_NetworkServerProvider) {
    self.provider = provider
    super.init(handler:handler)
  }

  /// Run the session. Internal.
  fileprivate func run(queue:DispatchQueue) throws {
    try handler.receiveMessage(initialMetadata:initialMetadata) {(requestData) in
      if let requestData = requestData {
        let requestMessage = try Networkserver_DevicesRequest(serializedData:requestData)
        let replyMessage = try self.provider.getdevices(request:requestMessage, session: self)
        try self.handler.sendResponse(message:replyMessage.serializedData(),
                                      statusCode:self.statusCode,
                                      statusMessage:self.statusMessage,
                                      trailingMetadata:self.trailingMetadata)
      }
    }
  }
}

// PrepareActivation (Unary)
internal class Networkserver_NetworkServerPrepareActivationSession : Networkserver_NetworkServerSession {
  private var provider : Networkserver_NetworkServerProvider

  /// Create a session.
  fileprivate init(handler:gRPC.Handler, provider: Networkserver_NetworkServerProvider) {
    self.provider = provider
    super.init(handler:handler)
  }

  /// Run the session. Internal.
  fileprivate func run(queue:DispatchQueue) throws {
    try handler.receiveMessage(initialMetadata:initialMetadata) {(requestData) in
      if let requestData = requestData {
        let requestMessage = try Broker_DeduplicatedDeviceActivationRequest(serializedData:requestData)
        let replyMessage = try self.provider.prepareactivation(request:requestMessage, session: self)
        try self.handler.sendResponse(message:replyMessage.serializedData(),
                                      statusCode:self.statusCode,
                                      statusMessage:self.statusMessage,
                                      trailingMetadata:self.trailingMetadata)
      }
    }
  }
}

// Activate (Unary)
internal class Networkserver_NetworkServerActivateSession : Networkserver_NetworkServerSession {
  private var provider : Networkserver_NetworkServerProvider

  /// Create a session.
  fileprivate init(handler:gRPC.Handler, provider: Networkserver_NetworkServerProvider) {
    self.provider = provider
    super.init(handler:handler)
  }

  /// Run the session. Internal.
  fileprivate func run(queue:DispatchQueue) throws {
    try handler.receiveMessage(initialMetadata:initialMetadata) {(requestData) in
      if let requestData = requestData {
        let requestMessage = try Handler_DeviceActivationResponse(serializedData:requestData)
        let replyMessage = try self.provider.activate(request:requestMessage, session: self)
        try self.handler.sendResponse(message:replyMessage.serializedData(),
                                      statusCode:self.statusCode,
                                      statusMessage:self.statusMessage,
                                      trailingMetadata:self.trailingMetadata)
      }
    }
  }
}

// Uplink (Unary)
internal class Networkserver_NetworkServerUplinkSession : Networkserver_NetworkServerSession {
  private var provider : Networkserver_NetworkServerProvider

  /// Create a session.
  fileprivate init(handler:gRPC.Handler, provider: Networkserver_NetworkServerProvider) {
    self.provider = provider
    super.init(handler:handler)
  }

  /// Run the session. Internal.
  fileprivate func run(queue:DispatchQueue) throws {
    try handler.receiveMessage(initialMetadata:initialMetadata) {(requestData) in
      if let requestData = requestData {
        let requestMessage = try Broker_DeduplicatedUplinkMessage(serializedData:requestData)
        let replyMessage = try self.provider.uplink(request:requestMessage, session: self)
        try self.handler.sendResponse(message:replyMessage.serializedData(),
                                      statusCode:self.statusCode,
                                      statusMessage:self.statusMessage,
                                      trailingMetadata:self.trailingMetadata)
      }
    }
  }
}

// Downlink (Unary)
internal class Networkserver_NetworkServerDownlinkSession : Networkserver_NetworkServerSession {
  private var provider : Networkserver_NetworkServerProvider

  /// Create a session.
  fileprivate init(handler:gRPC.Handler, provider: Networkserver_NetworkServerProvider) {
    self.provider = provider
    super.init(handler:handler)
  }

  /// Run the session. Internal.
  fileprivate func run(queue:DispatchQueue) throws {
    try handler.receiveMessage(initialMetadata:initialMetadata) {(requestData) in
      if let requestData = requestData {
        let requestMessage = try Broker_DownlinkMessage(serializedData:requestData)
        let replyMessage = try self.provider.downlink(request:requestMessage, session: self)
        try self.handler.sendResponse(message:replyMessage.serializedData(),
                                      statusCode:self.statusCode,
                                      statusMessage:self.statusMessage,
                                      trailingMetadata:self.trailingMetadata)
      }
    }
  }
}


/// Main server for generated service
internal class Networkserver_NetworkServerServer {
  private var address: String
  private var server: gRPC.Server
  private var provider: Networkserver_NetworkServerProvider?

  /// Create a server that accepts insecure connections.
  internal init(address:String,
              provider:Networkserver_NetworkServerProvider) {
    gRPC.initialize()
    self.address = address
    self.provider = provider
    self.server = gRPC.Server(address:address)
  }

  /// Create a server that accepts secure connections.
  internal init?(address:String,
               certificateURL:URL,
               keyURL:URL,
               provider:Networkserver_NetworkServerProvider) {
    gRPC.initialize()
    self.address = address
    self.provider = provider
    guard
      let certificate = try? String(contentsOf: certificateURL, encoding: .utf8),
      let key = try? String(contentsOf: keyURL, encoding: .utf8)
      else {
        return nil
    }
    self.server = gRPC.Server(address:address, key:key, certs:certificate)
  }

  /// Start the server.
  internal func start(queue:DispatchQueue = DispatchQueue.global()) {
    guard let provider = self.provider else {
      assert(false) // the server requires a provider
    }
    server.run {(handler) in
      print("Server received request to " + handler.host
        + " calling " + handler.method
        + " from " + handler.caller
        + " with " + String(describing:handler.requestMetadata) )

      do {
        switch handler.method {
        case "/networkserver.NetworkServer/GetDevices":
          try Networkserver_NetworkServerGetDevicesSession(handler:handler, provider:provider).run(queue:queue)
        case "/networkserver.NetworkServer/PrepareActivation":
          try Networkserver_NetworkServerPrepareActivationSession(handler:handler, provider:provider).run(queue:queue)
        case "/networkserver.NetworkServer/Activate":
          try Networkserver_NetworkServerActivateSession(handler:handler, provider:provider).run(queue:queue)
        case "/networkserver.NetworkServer/Uplink":
          try Networkserver_NetworkServerUplinkSession(handler:handler, provider:provider).run(queue:queue)
        case "/networkserver.NetworkServer/Downlink":
          try Networkserver_NetworkServerDownlinkSession(handler:handler, provider:provider).run(queue:queue)
        default:
          break // handle unknown requests
        }
      } catch (let error) {
        print("Server error: \(error)")
      }
    }
  }
}

/// Type for errors thrown from generated server code.
internal enum Networkserver_NetworkServerManagerServerError : Error {
  case endOfStream
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol Networkserver_NetworkServerManagerProvider {
  func getstatus(request : Networkserver_StatusRequest, session : Networkserver_NetworkServerManagerGetStatusSession) throws -> Networkserver_Status
}

/// Common properties available in each service session.
internal class Networkserver_NetworkServerManagerSession {
  fileprivate var handler : gRPC.Handler
  internal var requestMetadata : Metadata { return handler.requestMetadata }

  internal var statusCode : Int = 0
  internal var statusMessage : String = "OK"
  internal var initialMetadata : Metadata = Metadata()
  internal var trailingMetadata : Metadata = Metadata()

  fileprivate init(handler:gRPC.Handler) {
    self.handler = handler
  }
}

// GetStatus (Unary)
internal class Networkserver_NetworkServerManagerGetStatusSession : Networkserver_NetworkServerManagerSession {
  private var provider : Networkserver_NetworkServerManagerProvider

  /// Create a session.
  fileprivate init(handler:gRPC.Handler, provider: Networkserver_NetworkServerManagerProvider) {
    self.provider = provider
    super.init(handler:handler)
  }

  /// Run the session. Internal.
  fileprivate func run(queue:DispatchQueue) throws {
    try handler.receiveMessage(initialMetadata:initialMetadata) {(requestData) in
      if let requestData = requestData {
        let requestMessage = try Networkserver_StatusRequest(serializedData:requestData)
        let replyMessage = try self.provider.getstatus(request:requestMessage, session: self)
        try self.handler.sendResponse(message:replyMessage.serializedData(),
                                      statusCode:self.statusCode,
                                      statusMessage:self.statusMessage,
                                      trailingMetadata:self.trailingMetadata)
      }
    }
  }
}


/// Main server for generated service
internal class Networkserver_NetworkServerManagerServer {
  private var address: String
  private var server: gRPC.Server
  private var provider: Networkserver_NetworkServerManagerProvider?

  /// Create a server that accepts insecure connections.
  internal init(address:String,
              provider:Networkserver_NetworkServerManagerProvider) {
    gRPC.initialize()
    self.address = address
    self.provider = provider
    self.server = gRPC.Server(address:address)
  }

  /// Create a server that accepts secure connections.
  internal init?(address:String,
               certificateURL:URL,
               keyURL:URL,
               provider:Networkserver_NetworkServerManagerProvider) {
    gRPC.initialize()
    self.address = address
    self.provider = provider
    guard
      let certificate = try? String(contentsOf: certificateURL, encoding: .utf8),
      let key = try? String(contentsOf: keyURL, encoding: .utf8)
      else {
        return nil
    }
    self.server = gRPC.Server(address:address, key:key, certs:certificate)
  }

  /// Start the server.
  internal func start(queue:DispatchQueue = DispatchQueue.global()) {
    guard let provider = self.provider else {
      assert(false) // the server requires a provider
    }
    server.run {(handler) in
      print("Server received request to " + handler.host
        + " calling " + handler.method
        + " from " + handler.caller
        + " with " + String(describing:handler.requestMetadata) )

      do {
        switch handler.method {
        case "/networkserver.NetworkServerManager/GetStatus":
          try Networkserver_NetworkServerManagerGetStatusSession(handler:handler, provider:provider).run(queue:queue)
        default:
          break // handle unknown requests
        }
      } catch (let error) {
        print("Server error: \(error)")
      }
    }
  }
}
