/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: github.com/TheThingsNetwork/api/router/router.proto
 *
 */

/*
 * Copyright 2017, gRPC Authors All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import Foundation
import Dispatch
import gRPC

/// Type for errors thrown from generated server code.
internal enum Router_RouterServerError : Error {
  case endOfStream
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol Router_RouterProvider {
  func gatewaystatus(session : Router_RouterGatewayStatusSession) throws
  func uplink(session : Router_RouterUplinkSession) throws
  func subscribe(request : Router_SubscribeRequest, session : Router_RouterSubscribeSession) throws
  func activate(request : Router_DeviceActivationRequest, session : Router_RouterActivateSession) throws -> Router_DeviceActivationResponse
}

/// Common properties available in each service session.
internal class Router_RouterSession {
  fileprivate var handler : gRPC.Handler
  internal var requestMetadata : Metadata { return handler.requestMetadata }

  internal var statusCode : Int = 0
  internal var statusMessage : String = "OK"
  internal var initialMetadata : Metadata = Metadata()
  internal var trailingMetadata : Metadata = Metadata()

  fileprivate init(handler:gRPC.Handler) {
    self.handler = handler
  }
}

// GatewayStatus (Client Streaming)
internal class Router_RouterGatewayStatusSession : Router_RouterSession {
  private var provider : Router_RouterProvider

  /// Create a session.
  fileprivate init(handler:gRPC.Handler, provider: Router_RouterProvider) {
    self.provider = provider
    super.init(handler:handler)
  }

  /// Receive a message. Blocks until a message is received or the client closes the connection.
  internal func receive() throws -> Gateway_Status {
    let sem = DispatchSemaphore(value: 0)
    var requestMessage : Gateway_Status?
    try self.handler.receiveMessage() {(requestData) in
      if let requestData = requestData {
        requestMessage = try? Gateway_Status(serializedData:requestData)
      }
      sem.signal()
    }
    _ = sem.wait(timeout: DispatchTime.distantFuture)
    if requestMessage == nil {
      throw Router_RouterServerError.endOfStream
    }
    return requestMessage!
  }

  /// Send a response and close the connection.
  internal func sendAndClose(_ response: Google_Protobuf_Empty) throws {
    try self.handler.sendResponse(message:response.serializedData(),
                                  statusCode:self.statusCode,
                                  statusMessage:self.statusMessage,
                                  trailingMetadata:self.trailingMetadata)
  }

  /// Run the session. Internal.
  fileprivate func run(queue:DispatchQueue) throws {
    try self.handler.sendMetadata(initialMetadata:initialMetadata) {
      queue.async {
        do {
          try self.provider.gatewaystatus(session:self)
        } catch (let error) {
          print("error \(error)")
        }
      }
    }
  }
}

// Uplink (Client Streaming)
internal class Router_RouterUplinkSession : Router_RouterSession {
  private var provider : Router_RouterProvider

  /// Create a session.
  fileprivate init(handler:gRPC.Handler, provider: Router_RouterProvider) {
    self.provider = provider
    super.init(handler:handler)
  }

  /// Receive a message. Blocks until a message is received or the client closes the connection.
  internal func receive() throws -> Router_UplinkMessage {
    let sem = DispatchSemaphore(value: 0)
    var requestMessage : Router_UplinkMessage?
    try self.handler.receiveMessage() {(requestData) in
      if let requestData = requestData {
        requestMessage = try? Router_UplinkMessage(serializedData:requestData)
      }
      sem.signal()
    }
    _ = sem.wait(timeout: DispatchTime.distantFuture)
    if requestMessage == nil {
      throw Router_RouterServerError.endOfStream
    }
    return requestMessage!
  }

  /// Send a response and close the connection.
  internal func sendAndClose(_ response: Google_Protobuf_Empty) throws {
    try self.handler.sendResponse(message:response.serializedData(),
                                  statusCode:self.statusCode,
                                  statusMessage:self.statusMessage,
                                  trailingMetadata:self.trailingMetadata)
  }

  /// Run the session. Internal.
  fileprivate func run(queue:DispatchQueue) throws {
    try self.handler.sendMetadata(initialMetadata:initialMetadata) {
      queue.async {
        do {
          try self.provider.uplink(session:self)
        } catch (let error) {
          print("error \(error)")
        }
      }
    }
  }
}

// Subscribe (Server Streaming)
internal class Router_RouterSubscribeSession : Router_RouterSession {
  private var provider : Router_RouterProvider

  /// Create a session.
  fileprivate init(handler:gRPC.Handler, provider: Router_RouterProvider) {
    self.provider = provider
    super.init(handler:handler)
  }

  /// Send a message. Nonblocking.
  internal func send(_ response: Router_DownlinkMessage) throws {
    try handler.sendResponse(message:response.serializedData()) {}
  }

  /// Run the session. Internal.
  fileprivate func run(queue:DispatchQueue) throws {
    try self.handler.receiveMessage(initialMetadata:initialMetadata) {(requestData) in
      if let requestData = requestData {
        do {
          let requestMessage = try Router_SubscribeRequest(serializedData:requestData)
          // to keep providers from blocking the server thread,
          // we dispatch them to another queue.
          queue.async {
            do {
              try self.provider.subscribe(request:requestMessage, session: self)
              try self.handler.sendStatus(statusCode:self.statusCode,
                                          statusMessage:self.statusMessage,
                                          trailingMetadata:self.trailingMetadata,
                                          completion:{})
            } catch (let error) {
              print("error: \(error)")
            }
          }
        } catch (let error) {
          print("error: \(error)")
        }
      }
    }
  }
}

// Activate (Unary)
internal class Router_RouterActivateSession : Router_RouterSession {
  private var provider : Router_RouterProvider

  /// Create a session.
  fileprivate init(handler:gRPC.Handler, provider: Router_RouterProvider) {
    self.provider = provider
    super.init(handler:handler)
  }

  /// Run the session. Internal.
  fileprivate func run(queue:DispatchQueue) throws {
    try handler.receiveMessage(initialMetadata:initialMetadata) {(requestData) in
      if let requestData = requestData {
        let requestMessage = try Router_DeviceActivationRequest(serializedData:requestData)
        let replyMessage = try self.provider.activate(request:requestMessage, session: self)
        try self.handler.sendResponse(message:replyMessage.serializedData(),
                                      statusCode:self.statusCode,
                                      statusMessage:self.statusMessage,
                                      trailingMetadata:self.trailingMetadata)
      }
    }
  }
}


/// Main server for generated service
internal class Router_RouterServer {
  private var address: String
  private var server: gRPC.Server
  private var provider: Router_RouterProvider?

  /// Create a server that accepts insecure connections.
  internal init(address:String,
              provider:Router_RouterProvider) {
    gRPC.initialize()
    self.address = address
    self.provider = provider
    self.server = gRPC.Server(address:address)
  }

  /// Create a server that accepts secure connections.
  internal init?(address:String,
               certificateURL:URL,
               keyURL:URL,
               provider:Router_RouterProvider) {
    gRPC.initialize()
    self.address = address
    self.provider = provider
    guard
      let certificate = try? String(contentsOf: certificateURL, encoding: .utf8),
      let key = try? String(contentsOf: keyURL, encoding: .utf8)
      else {
        return nil
    }
    self.server = gRPC.Server(address:address, key:key, certs:certificate)
  }

  /// Start the server.
  internal func start(queue:DispatchQueue = DispatchQueue.global()) {
    guard let provider = self.provider else {
      assert(false) // the server requires a provider
    }
    server.run {(handler) in
      print("Server received request to " + handler.host
        + " calling " + handler.method
        + " from " + handler.caller
        + " with " + String(describing:handler.requestMetadata) )

      do {
        switch handler.method {
        case "/router.Router/GatewayStatus":
          try Router_RouterGatewayStatusSession(handler:handler, provider:provider).run(queue:queue)
        case "/router.Router/Uplink":
          try Router_RouterUplinkSession(handler:handler, provider:provider).run(queue:queue)
        case "/router.Router/Subscribe":
          try Router_RouterSubscribeSession(handler:handler, provider:provider).run(queue:queue)
        case "/router.Router/Activate":
          try Router_RouterActivateSession(handler:handler, provider:provider).run(queue:queue)
        default:
          break // handle unknown requests
        }
      } catch (let error) {
        print("Server error: \(error)")
      }
    }
  }
}

/// Type for errors thrown from generated server code.
internal enum Router_RouterManagerServerError : Error {
  case endOfStream
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol Router_RouterManagerProvider {
  func gatewaystatus(request : Router_GatewayStatusRequest, session : Router_RouterManagerGatewayStatusSession) throws -> Router_GatewayStatusResponse
  func getstatus(request : Router_StatusRequest, session : Router_RouterManagerGetStatusSession) throws -> Router_Status
}

/// Common properties available in each service session.
internal class Router_RouterManagerSession {
  fileprivate var handler : gRPC.Handler
  internal var requestMetadata : Metadata { return handler.requestMetadata }

  internal var statusCode : Int = 0
  internal var statusMessage : String = "OK"
  internal var initialMetadata : Metadata = Metadata()
  internal var trailingMetadata : Metadata = Metadata()

  fileprivate init(handler:gRPC.Handler) {
    self.handler = handler
  }
}

// GatewayStatus (Unary)
internal class Router_RouterManagerGatewayStatusSession : Router_RouterManagerSession {
  private var provider : Router_RouterManagerProvider

  /// Create a session.
  fileprivate init(handler:gRPC.Handler, provider: Router_RouterManagerProvider) {
    self.provider = provider
    super.init(handler:handler)
  }

  /// Run the session. Internal.
  fileprivate func run(queue:DispatchQueue) throws {
    try handler.receiveMessage(initialMetadata:initialMetadata) {(requestData) in
      if let requestData = requestData {
        let requestMessage = try Router_GatewayStatusRequest(serializedData:requestData)
        let replyMessage = try self.provider.gatewaystatus(request:requestMessage, session: self)
        try self.handler.sendResponse(message:replyMessage.serializedData(),
                                      statusCode:self.statusCode,
                                      statusMessage:self.statusMessage,
                                      trailingMetadata:self.trailingMetadata)
      }
    }
  }
}

// GetStatus (Unary)
internal class Router_RouterManagerGetStatusSession : Router_RouterManagerSession {
  private var provider : Router_RouterManagerProvider

  /// Create a session.
  fileprivate init(handler:gRPC.Handler, provider: Router_RouterManagerProvider) {
    self.provider = provider
    super.init(handler:handler)
  }

  /// Run the session. Internal.
  fileprivate func run(queue:DispatchQueue) throws {
    try handler.receiveMessage(initialMetadata:initialMetadata) {(requestData) in
      if let requestData = requestData {
        let requestMessage = try Router_StatusRequest(serializedData:requestData)
        let replyMessage = try self.provider.getstatus(request:requestMessage, session: self)
        try self.handler.sendResponse(message:replyMessage.serializedData(),
                                      statusCode:self.statusCode,
                                      statusMessage:self.statusMessage,
                                      trailingMetadata:self.trailingMetadata)
      }
    }
  }
}


/// Main server for generated service
internal class Router_RouterManagerServer {
  private var address: String
  private var server: gRPC.Server
  private var provider: Router_RouterManagerProvider?

  /// Create a server that accepts insecure connections.
  internal init(address:String,
              provider:Router_RouterManagerProvider) {
    gRPC.initialize()
    self.address = address
    self.provider = provider
    self.server = gRPC.Server(address:address)
  }

  /// Create a server that accepts secure connections.
  internal init?(address:String,
               certificateURL:URL,
               keyURL:URL,
               provider:Router_RouterManagerProvider) {
    gRPC.initialize()
    self.address = address
    self.provider = provider
    guard
      let certificate = try? String(contentsOf: certificateURL, encoding: .utf8),
      let key = try? String(contentsOf: keyURL, encoding: .utf8)
      else {
        return nil
    }
    self.server = gRPC.Server(address:address, key:key, certs:certificate)
  }

  /// Start the server.
  internal func start(queue:DispatchQueue = DispatchQueue.global()) {
    guard let provider = self.provider else {
      assert(false) // the server requires a provider
    }
    server.run {(handler) in
      print("Server received request to " + handler.host
        + " calling " + handler.method
        + " from " + handler.caller
        + " with " + String(describing:handler.requestMetadata) )

      do {
        switch handler.method {
        case "/router.RouterManager/GatewayStatus":
          try Router_RouterManagerGatewayStatusSession(handler:handler, provider:provider).run(queue:queue)
        case "/router.RouterManager/GetStatus":
          try Router_RouterManagerGetStatusSession(handler:handler, provider:provider).run(queue:queue)
        default:
          break // handle unknown requests
        }
      } catch (let error) {
        print("Server error: \(error)")
      }
    }
  }
}
